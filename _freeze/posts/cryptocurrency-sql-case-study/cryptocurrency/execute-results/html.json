{
  "hash": "1a22a7345b5e74c987a72cea59b81453",
  "result": {
    "markdown": "---\ntitle: \"Cryptocurrency SQL Case Study\"\ndescription: \"Data with Danny - SQL masterclass - O’Reilly. With R solutions for Part 4: Window functions.\"\ndate: 2022-11-25\ncategories:\n  - SQL\n  - PostgreSQL\n  - EDA\n---\n\n\n## Foreword\n\nOn November 18, 2022 I attended the SQL masterclass \"SQL and PostgreSQL for Data Analytics\", presented live by Danny Ma on O'Reilly platform.\n\nThis [Github repository](https://github.com/DataWithDanny/sql-masterclass) contains all the necessary data, sql scripts, and other materials.\n\nI'm posting some parts of it here for my own reference, but I strongly recommend that you register for that event that takes place every once in a while. It's free and worth it. Danny Ma is an excellent teacher and his explanations are outstanding.\n\n### Setting up the programming environment\n\nFor the purposes of this project, I created the local `trading` Postgres database on my machine and ran the sql script to create and populate the tables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading packages\nlibrary(DBI)\nlibrary(RPostgres)  \nlibrary(tidyverse)\n```\n:::\n\n\nThe `sql` engine uses the `DBI` package to execute SQL queries, print their results, and optionally assign the results to a data frame. To use the `sql` engine, we first need to establish a DBI connection to a database (typically via the `DBI::dbConnect()` function).\n\n### Creating a connection to the `trading` database\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycon <- DBI::dbConnect(RPostgres::Postgres(), \n                        dbname = \"trading\", \n                        host = \"localhost\",  \n                        port = \"5432\",  \n                        user = rstudioapi::askForPassword(\"Database username\"),\n                        password = rstudioapi::askForPassword(\"Database password\"))\n```\n:::\n\n\nThere are several options to [secure your credentials](https://solutions.posit.co/connections/db/best-practices/managing-credentials/index.html) in R. Here I use prompting for credentials via `rstudioapi`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PqConnection> trading@localhost:5432\n```\n:::\n:::\n\n\n## Introduction\n\nIn this fictitious case study - Danny's data mentors from the Data With Danny team have been busy trading cryptocurrency markets since 2017.\n\nThe main purpose for this case study is to analyze the performance of the DWD mentors over time. We will accomplish this by writing SQL queries to utilize all available datasets to answer a series of realistic business questions.\n\n### Available Datasets\n\nAll of our data for this case study exists within the `trading` schema in the **PostgreSQL database**.\n\nThere are 3 data tables available in this schema:\n\n-   `members`\n-   `prices`\n-   `transactions`\n\n### Entity Relationship Diagram\n\nI drew the ERD [here](https://dbdiagram.io/home).\n\n![](images/erd_trading.png){.preview-image}\n\n### Data Dictionary and Overview\n\nThe **`trading.members` table** consists of information about the mentors from the Data With Danny team.\n\n| Column name  | Description                      |\n|--------------|----------------------------------|\n| `member_id`  | unique id for each mentor        |\n| `first_name` | first name for each mentor       |\n| `region`     | region where each mentor is from |\n\n: `trading.members` table\n\n\n::: {.cell max.print='null'}\n\n```{.sql .cell-code}\nSELECT * FROM trading.members\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 14 records\n\n|member_id |first_name |region        |\n|:---------|:----------|:-------------|\n|c4ca42    |Danny      |Australia     |\n|c81e72    |Vipul      |United States |\n|eccbc8    |Charlie    |United States |\n|a87ff6    |Nandita    |United States |\n|e4da3b    |Rowan      |United States |\n|167909    |Ayush      |United States |\n|8f14e4    |Alex       |United States |\n|c9f0f8    |Abe        |United States |\n|45c48c    |Ben        |Australia     |\n|d3d944    |Enoch      |Africa        |\n|6512bd    |Vikram     |India         |\n|c20ad4    |Leah       |Asia          |\n|c51ce4    |Pavan      |Australia     |\n|aab323    |Sonia      |Australia     |\n\n</div>\n:::\n\n\nThe **`trading.prices` table** consists of daily price and volume information from January 2017 through to August 2021 for the 2 most popular cryptocurrency tickers: Bitcoin and Ethereum.\n\n| Column name   | Description                    |\n|---------------|--------------------------------|\n| `ticker`      | one of either BTC or ETH       |\n| `market_date` | the date for each record       |\n| `price`       | closing price at end of day    |\n| `open`        | the opening price              |\n| `high`        | the highest price for that day |\n| `low`         | the lowest price for that day  |\n| `volume`      | the total volume traded        |\n| `change`      | \\% change in daily price       |\n\n: `trading.prices` table\n\nThe first 5 rows from this dataset.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM trading.prices LIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|ticker |market_date |   price|    open|    high|     low|volume  |change |\n|:------|:-----------|-------:|-------:|-------:|-------:|:-------|:------|\n|ETH    |2021-08-29  | 3177.84| 3243.96| 3282.21| 3162.79|582.04K |-2.04% |\n|ETH    |2021-08-28  | 3243.90| 3273.78| 3284.58| 3212.24|466.21K |-0.91% |\n|ETH    |2021-08-27  | 3273.58| 3093.78| 3279.93| 3063.37|839.54K |5.82%  |\n|ETH    |2021-08-26  | 3093.54| 3228.03| 3249.62| 3057.48|118.44K |-4.17% |\n|ETH    |2021-08-25  | 3228.15| 3172.12| 3247.43| 3080.70|923.13K |1.73%  |\n\n</div>\n:::\n\n\nThe **`trading.transactions` table** consists of buy and sell transactions data for each trade made by the DWD mentors.\n\n| Column name      | Description                        |\n|------------------|------------------------------------|\n| `txn_id`         | unique ID for each transaction     |\n| `member_id`      | member identifier for each trade   |\n| `ticker`         | the ticker for each trade          |\n| `txn_date`       | the date for each transaction      |\n| `txn_type`       | either BUY or SELL                 |\n| `quantity`       | the total quantity for each trade  |\n| `percentage_fee` | \\% of total amount charged as fees |\n| `txn_time`       | the timestamp for each trade       |\n\n: `trading.transactions` table\n\nThe first 5 frows from this transactions table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM trading.transactions LIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|txn_id |member_id |ticker |txn_date   |txn_type | quantity| percentage_fee|txn_time   |\n|:------|:---------|:------|:----------|:--------|--------:|--------------:|:----------|\n|1      |c81e72    |BTC    |2017-01-01 |BUY      |       50|            0.3|2017-01-01 |\n|2      |eccbc8    |BTC    |2017-01-01 |BUY      |       50|            0.3|2017-01-01 |\n|3      |a87ff6    |BTC    |2017-01-01 |BUY      |       50|            0.0|2017-01-01 |\n|4      |e4da3b    |BTC    |2017-01-01 |BUY      |       50|            0.3|2017-01-01 |\n|5      |167909    |BTC    |2017-01-01 |BUY      |       50|            0.3|2017-01-01 |\n\n</div>\n:::\n\n\n## PART 1️⃣: Basic Data Analysis Techniques\n\n### Question 1.1\n\nShow only the top 5 rows from the `trading.members` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM trading.members\nLIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|member_id |first_name |region        |\n|:---------|:----------|:-------------|\n|c4ca42    |Danny      |Australia     |\n|c81e72    |Vipul      |United States |\n|eccbc8    |Charlie    |United States |\n|a87ff6    |Nandita    |United States |\n|e4da3b    |Rowan      |United States |\n\n</div>\n:::\n\n\n### Question 1.2\n\nSort all the rows in the `trading.members` table by `first_name` in alphabetical order and show the top 3 rows with all columns.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM trading.members\nORDER BY first_name\nLIMIT 3\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|member_id |first_name |region        |\n|:---------|:----------|:-------------|\n|c9f0f8    |Abe        |United States |\n|8f14e4    |Alex       |United States |\n|167909    |Ayush      |United States |\n\n</div>\n:::\n\n\n### Question 1.3\n\nCount the number of records from the `trading.members` table which have United States as the `region` value.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  COUNT(*) AS record_count\nFROM trading.members\nWHERE region = 'United States'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| record_count|\n|------------:|\n|            7|\n\n</div>\n:::\n\n\n### Question 1.4\n\nSelect only the `first_name` and `region` columns for mentors who are not from Australia.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  first_name, \n  region\nFROM trading.members\nWHERE region != 'Australia'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|first_name |region        |\n|:----------|:-------------|\n|Vipul      |United States |\n|Charlie    |United States |\n|Nandita    |United States |\n|Rowan      |United States |\n|Ayush      |United States |\n|Alex       |United States |\n|Abe        |United States |\n|Enoch      |Africa        |\n|Vikram     |India         |\n|Leah       |Asia          |\n\n</div>\n:::\n\n\n### Question 1.5\n\nReturn only the unique `region` values from the `trading.members` table and sort the output by reverse alphabetical order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT region\nFROM trading.members\nORDER BY region DESC\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|region        |\n|:-------------|\n|United States |\n|India         |\n|Australia     |\n|Asia          |\n|Africa        |\n\n</div>\n:::\n\n\n## PART 2️⃣: Aggregate Functions for Data Analysis\n\n### Question 2.1\n\nHow many records are there per `ticker` value in the `trading.prices` table?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  ticker,\n  COUNT(*) AS record_count\nFROM trading.prices\nGROUP BY ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|ticker | record_count|\n|:------|------------:|\n|BTC    |         1702|\n|ETH    |         1702|\n\n</div>\n:::\n\n\n### Question 2.2\n\nWhat is the maximum, minimum values for the `price` column for both Bitcoin and Ethereum in 2020?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  ticker,\n  MIN(price) AS min_price,\n  MAX(price) AS max_price\nFROM trading.prices\nWHERE market_date BETWEEN '2020-01-01' AND '2020-12-31'\nGROUP BY ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|ticker | min_price| max_price|\n|:------|---------:|---------:|\n|BTC    |    4826.0|   28949.4|\n|ETH    |     107.9|     751.8|\n\n</div>\n:::\n\n\n### Question 2.3\n\nWhat is the annual minimum, maximum and average price for each ticker?\n\n-   Include a calendar_year column with the year from 2017 through to 2021\n-   Calculate a `spread` column which calculates the difference between the min and max prices\n-   Round the average price output to 2 decimal places\n-   Sort the output in chronological order with Bitcoin records before Ethereum within each year\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  EXTRACT(YEAR FROM market_date) AS calendar_year,\n  ticker,\n  MIN(price) AS min_price,\n  MAX(price) AS max_price,\n  ROUND(AVG(price)::NUMERIC, 2) AS avg_price,\n  MAX(price) - MIN(price) AS spread\nFROM trading.prices\nGROUP BY calendar_year, ticker\nORDER BY calendar_year, ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| calendar_year|ticker | min_price| max_price| avg_price|   spread|\n|-------------:|:------|---------:|---------:|---------:|--------:|\n|          2017|BTC    |    785.40|  19345.50|   3981.07| 18560.10|\n|          2017|ETH    |      8.20|    799.98|    220.34|   791.78|\n|          2018|BTC    |   3228.70|  17172.30|   7552.16| 13943.60|\n|          2018|ETH    |     83.81|   1380.00|    481.33|  1296.19|\n|          2019|BTC    |   3397.70|  13063.80|   7371.82|  9666.10|\n|          2019|ETH    |    104.55|    338.54|    180.99|   233.99|\n|          2020|BTC    |   4826.00|  28949.40|  11111.63| 24123.40|\n|          2020|ETH    |    107.90|    751.80|    307.30|   643.90|\n|          2021|BTC    |  29359.90|  63540.90|  44353.55| 34181.00|\n|          2021|ETH    |    729.12|   4167.78|   2199.12|  3438.66|\n\n</div>\n:::\n\n\n### Question 2.4\n\nWhat is the monthly average of the `price` column for each ticker from January 2020 and after?\n\n-   Create a `month_start` column with the first day of each month\n-   Sort the output by ticker in alphabetical order and months in chronological order\n-   Round the `average_price` column to 2 decimal places\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  ticker,\n  DATE_TRUNC('MON', market_date)::DATE AS month_start,\n  ROUND(AVG(price)::NUMERIC, 2) AS average_price\nFROM trading.prices\nWHERE market_date >= '2020-01-01'\nGROUP BY ticker, month_start\nORDER BY ticker, month_start\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|ticker |month_start | average_price|\n|:------|:-----------|-------------:|\n|BTC    |2020-01-01  |       8378.80|\n|BTC    |2020-02-01  |       9636.56|\n|BTC    |2020-03-01  |       6863.11|\n|BTC    |2020-04-01  |       7211.03|\n|BTC    |2020-05-01  |       9253.55|\n|BTC    |2020-06-01  |       9481.85|\n|BTC    |2020-07-01  |       9592.10|\n|BTC    |2020-08-01  |      11638.41|\n|BTC    |2020-09-01  |      10643.33|\n|BTC    |2020-10-01  |      11888.36|\n\n</div>\n:::\n\n\n## PART 3️⃣: Case When Statements\n\n### Question 3.1\n\nConvert the `volume` column in the `trading.prices` table with an adjusted integer value to take into the unit values\n\n-   Return only the `market_date`, `price`, `volume` and `adjusted_volume` columns for the first 10 days of August 2021 for Ethereum only\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  market_date,\n  price,\n  volume,    \n  CASE\n    WHEN RIGHT(volume, 1) = 'K' THEN LEFT(volume, LENGTH(volume) - 1)::NUMERIC * 1000 \n    WHEN RIGHT(volume, 1) = 'M' THEN LEFT(volume, LENGTH(volume) - 1)::NUMERIC * 1000000 \n    WHEN volume = '-' THEN 0\n    END AS adjusted_volume\nFROM trading.prices\nWHERE ticker = 'ETH'\n  AND market_date BETWEEN '2021-08-01' AND '2021-08-10'\nORDER BY market_date\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|market_date |   price|volume  | adjusted_volume|\n|:-----------|-------:|:-------|---------------:|\n|2021-08-01  | 2556.23|1.20M   |         1200000|\n|2021-08-02  | 2608.04|970.67K |          970670|\n|2021-08-03  | 2506.65|158.45K |          158450|\n|2021-08-04  | 2725.29|1.23M   |         1230000|\n|2021-08-05  | 2827.21|1.65M   |         1650000|\n|2021-08-06  | 2889.43|1.06M   |         1060000|\n|2021-08-07  | 3158.00|64.84K  |           64840|\n|2021-08-08  | 3012.07|1.25M   |         1250000|\n|2021-08-09  | 3162.93|1.44M   |         1440000|\n|2021-08-10  | 3140.71|1.12M   |         1120000|\n\n</div>\n:::\n\n\n### Question 3.2\n\nHow many \"breakout\" days were there in 2020 where the `price` column is greater than the `open` column for each `ticker`? In the same query also calculate the number of \"non breakout\" days where the `price` column was lower than or equal to the `open` column.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  ticker,\n  SUM(CASE WHEN price > open THEN 1 ELSE 0 END) AS breakout_days,\n  SUM(CASE WHEN price <= open THEN 1 ELSE 0 END) AS non_breakout_days\nFROM trading.prices\nWHERE market_date BETWEEN '2020-01-01' AND '2020-12-31'\nGROUP BY ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|ticker | breakout_days| non_breakout_days|\n|:------|-------------:|-----------------:|\n|BTC    |           207|               159|\n|ETH    |           200|               166|\n\n</div>\n:::\n\n\n### Question 3.3\n\nWhat was the final quantity Bitcoin and Ethereum held by all Data With Danny mentors based off the `trading.transactions` table?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  ticker,\n  SUM(CASE WHEN txn_type = 'SELL' THEN -quantity ELSE quantity END) AS final_btc_holding\nFROM trading.transactions\nGROUP BY ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|ticker | final_btc_holding|\n|:------|-----------------:|\n|BTC    |          42848.67|\n|ETH    |          32801.04|\n\n</div>\n:::\n\n\nDivided by quantity bought and quantity sold.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  ticker,\n  SUM(CASE WHEN txn_type = 'BUY' THEN quantity ELSE 0 END) AS qty_bought,\n  SUM(CASE WHEN txn_type = 'SELL' THEN quantity ELSE 0 END) AS qty_sold\nFROM trading.transactions\nGROUP BY ticker\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|ticker | qty_bought|  qty_sold|\n|:------|----------:|---------:|\n|BTC    |   53250.15| 10401.485|\n|ETH    |   42599.20|  9798.154|\n\n</div>\n:::\n\n\n## PART 4️⃣: Window Functions\n\n### Question 4.1\n\nWhat are the `market_date`, `price` and `volume` and `price_rank` values for the days with the top 5 highest `price` values for each tickers in the `trading.prices` table?\n\n-   The `price_rank` column is the ranking for price values for each ticker with rank = 1 for the highest value.\n-   Return the output for Bitcoin, followed by Ethereum in price rank order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH cte_rank AS (\n  SELECT\n    ticker,\n    market_date,\n    price, \n    volume,\n    RANK() OVER (PARTITION BY ticker ORDER BY price DESC) AS price_rank\n  FROM trading.prices\n)\n\nSELECT *\nFROM cte_rank\nWHERE price_rank <= 5\nORDER BY ticker, price_rank\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|ticker |market_date |    price|volume  | price_rank|\n|:------|:-----------|--------:|:-------|----------:|\n|BTC    |2021-04-13  | 63540.90|126.56K |          1|\n|BTC    |2021-04-15  | 63216.00|76.97K  |          2|\n|BTC    |2021-04-14  | 62980.40|130.43K |          3|\n|BTC    |2021-04-16  | 61379.70|136.85K |          4|\n|BTC    |2021-03-13  | 61195.30|134.64K |          5|\n|ETH    |2021-05-11  |  4167.78|1.27M   |          1|\n|ETH    |2021-05-14  |  4075.38|2.06M   |          2|\n|ETH    |2021-05-10  |  3947.90|2.70M   |          3|\n|ETH    |2021-05-09  |  3922.23|1.94M   |          4|\n|ETH    |2021-05-08  |  3905.55|1.34M   |          5|\n\n</div>\n:::\n\n\n#### Question 4.1 - {{< fa brands r-project >}} solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmembers <- read_csv(\"data/members_tbl.csv\")\nprices <- read_csv(\"data/prices_tbl.csv\")\ntransactions <- read_csv(\"data/transactions_tbl.csv\")\n\nprices %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  ticker market_date price  open  high   low volume  change\n  <chr>  <date>      <dbl> <dbl> <dbl> <dbl> <chr>   <chr> \n1 ETH    2021-08-29  3178. 3244. 3282. 3163. 582.04K -2.04%\n2 ETH    2021-08-28  3244. 3274. 3285. 3212. 466.21K -0.91%\n3 ETH    2021-08-27  3274. 3094. 3280. 3063. 839.54K 5.82% \n4 ETH    2021-08-26  3094. 3228. 3250. 3057. 118.44K -4.17%\n5 ETH    2021-08-25  3228. 3172. 3247. 3081. 923.13K 1.73% \n6 ETH    2021-08-24  3173. 3323. 3358. 3151. 988.82K -4.41%\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# R solution\nprices %>% \n  select(ticker, market_date, price, volume) %>% \n  group_by(ticker) %>% \n  arrange(ticker, desc(price)) %>% \n  mutate(price_rank = row_number()) %>% \n  filter(price_rank <=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n# Groups:   ticker [2]\n   ticker market_date  price volume  price_rank\n   <chr>  <date>       <dbl> <chr>        <int>\n 1 BTC    2021-04-13  63541. 126.56K          1\n 2 BTC    2021-04-15  63216  76.97K           2\n 3 BTC    2021-04-14  62980. 130.43K          3\n 4 BTC    2021-04-16  61380. 136.85K          4\n 5 BTC    2021-03-13  61195. 134.64K          5\n 6 ETH    2021-05-11   4168. 1.27M            1\n 7 ETH    2021-05-14   4075. 2.06M            2\n 8 ETH    2021-05-10   3948. 2.70M            3\n 9 ETH    2021-05-09   3922. 1.94M            4\n10 ETH    2021-05-08   3906. 1.34M            5\n```\n:::\n:::\n\n\n### Question 4.2\n\nCalculate a 7 day rolling average for the `price` and `volume` columns in the `trading.prices` table for each ticker.\n\n-   Return only the first 10 days of August 2021\n\n\n::: {.cell max.print='null'}\n\n```{.sql .cell-code}\n-- Step 1 - Adjusted prices CTE\nWITH cte_adjusted_prices AS (\n  SELECT\n    ticker,\n    market_date,\n    price,\n    CASE\n      WHEN RIGHT(volume, 1) = 'K' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000\n      WHEN RIGHT(volume, 1) = 'M' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000000\n      WHEN volume = '-' THEN 0\n    END AS volume\n  FROM trading.prices\n),\n\n-- Step 2 - Moving Averages CTE\ncte_moving_averages AS (\n  SELECT\n    ticker,\n    market_date,\n    price,\n    AVG(price) OVER (\n      PARTITION BY ticker\n      ORDER BY market_date\n      RANGE BETWEEN '6 DAYS' PRECEDING AND CURRENT ROW  \n    ) AS moving_avg_price,\n    volume,\n    AVG(volume) OVER (\n      PARTITION BY ticker\n      ORDER BY market_date\n      RANGE BETWEEN '6 DAYS' PRECEDING AND CURRENT ROW  \n    ) AS moving_avg_volume\n  FROM cte_adjusted_prices\n)\n\n-- final output\nSELECT * FROM cte_moving_averages\nWHERE market_date BETWEEN '2021-08-01' AND '2021-08-10'\nORDER BY ticker, market_date;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 20 records\n\n|ticker |market_date |    price| moving_avg_price|  volume| moving_avg_volume|\n|:------|:-----------|--------:|----------------:|-------:|-----------------:|\n|BTC    |2021-08-01  | 39878.30|        40052.657|   80330|         103645.71|\n|BTC    |2021-08-02  | 39168.40|        40322.914|   74810|          88957.14|\n|BTC    |2021-08-03  | 38130.30|        40134.100|     260|          74674.29|\n|BTC    |2021-08-04  | 39736.90|        40096.057|   79220|          64717.14|\n|BTC    |2021-08-05  | 40867.20|        40219.743|  130600|          72617.14|\n|BTC    |2021-08-06  | 42795.40|        40304.314|  111930|          74542.86|\n|BTC    |2021-08-07  | 44614.20|        40741.529|  112840|          84284.29|\n|BTC    |2021-08-08  | 43792.80|        41300.743|  105250|          87844.29|\n|BTC    |2021-08-09  | 46284.30|        42317.300|  117080|          93882.86|\n|BTC    |2021-08-10  | 45593.80|        43383.514|   80550|         105352.86|\n|ETH    |2021-08-01  |  2556.23|         2394.166| 1200000|        1069824.29|\n|ETH    |2021-08-02  |  2608.04|         2448.239|  970670|         938491.43|\n|ETH    |2021-08-03  |  2506.65|         2477.729|  158450|         782555.71|\n|ETH    |2021-08-04  |  2725.29|         2538.611| 1230000|         819850.00|\n|ETH    |2021-08-05  |  2827.21|         2602.366| 1650000|         963742.86|\n|ETH    |2021-08-06  |  2889.43|         2663.577| 1060000|         968028.57|\n|ETH    |2021-08-07  |  3158.00|         2752.979|   64840|         904851.43|\n|ETH    |2021-08-08  |  3012.07|         2818.099| 1250000|         911994.29|\n|ETH    |2021-08-09  |  3162.93|         2897.369| 1440000|         979041.43|\n|ETH    |2021-08-10  |  3140.71|         2987.949| 1120000|        1116405.71|\n\n</div>\n:::\n\n\n#### Question 4.2 - {{< fa brands r-project >}} solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices %>% \n  mutate(volume = case_when(\n    str_sub(volume, -1) == \"K\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^3,\n    str_sub(volume, -1) == \"M\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^6,\n    str_sub(volume, -1) == \"-\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 0)\n  ) %>% \n  group_by(ticker) %>% \n  arrange(ticker, market_date) %>% \n  mutate(moving_avg_price = zoo::rollmean(price, k = 7, align = \"right\", fill = NA),\n         moving_avg_volume = zoo::rollmean(volume, k = 7, align = \"right\", fill = NA)) %>% \n  select(ticker, market_date, price, moving_avg_price, volume, moving_avg_volume) %>% \n  filter(market_date >= \"2021-08-01\", market_date <= \"2021-08-10\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 6\n# Groups:   ticker [2]\n   ticker market_date  price moving_avg_price  volume moving_avg_volume\n   <chr>  <date>       <dbl>            <dbl>   <dbl>             <dbl>\n 1 BTC    2021-08-01  39878.           40053.   80330           103646.\n 2 BTC    2021-08-02  39168.           40323.   74810            88957.\n 3 BTC    2021-08-03  38130.           40134.     260            74674.\n 4 BTC    2021-08-04  39737.           40096.   79220            64717.\n 5 BTC    2021-08-05  40867.           40220.  130600            72617.\n 6 BTC    2021-08-06  42795.           40304.  111930            74543.\n 7 BTC    2021-08-07  44614.           40742.  112840            84284.\n 8 BTC    2021-08-08  43793.           41301.  105250            87844.\n 9 BTC    2021-08-09  46284.           42317.  117080            93883.\n10 BTC    2021-08-10  45594.           43384.   80550           105353.\n11 ETH    2021-08-01   2556.            2394. 1200000          1069824.\n12 ETH    2021-08-02   2608.            2448.  970670           938491.\n13 ETH    2021-08-03   2507.            2478.  158450           782556.\n14 ETH    2021-08-04   2725.            2539. 1230000           819850 \n15 ETH    2021-08-05   2827.            2602. 1650000           963743.\n16 ETH    2021-08-06   2889.            2664. 1060000           968029.\n17 ETH    2021-08-07   3158             2753.   64840           904851.\n18 ETH    2021-08-08   3012.            2818. 1250000           911994.\n19 ETH    2021-08-09   3163.            2897. 1440000           979041.\n20 ETH    2021-08-10   3141.            2988. 1120000          1116406.\n```\n:::\n:::\n\n\n### Question 4.3\n\nCalculate the monthly cumulative volume traded for each ticker in 2020\n\n-   Sort the output by ticker in chronological order with the `month_start` as the first day of each month\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH cte_monthly_volume AS (\n  SELECT\n    ticker,\n    DATE_TRUNC('MON', market_date)::DATE AS month_start,\n    SUM(\n      CASE\n      WHEN RIGHT(volume, 1) = 'K' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000\n      WHEN RIGHT(volume, 1) = 'M' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000000\n      WHEN volume = '-' THEN 0\n    END\n  ) AS monthly_volume\n  FROM trading.prices\n  WHERE market_date BETWEEN '2020-01-01' AND '2020-12-31'\n  GROUP BY ticker, month_start\n)\n\nSELECT\n  ticker,\n  month_start,\n  SUM(monthly_volume) OVER (\n    PARTITION BY ticker\n    ORDER BY month_start\n    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n  ) AS cumulative_monthly_volume\nFROM cte_monthly_volume\nORDER BY ticker, month_start\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|ticker |month_start | cumulative_monthly_volume|\n|:------|:-----------|-------------------------:|\n|BTC    |2020-01-01  |                  23451920|\n|BTC    |2020-02-01  |                  46839130|\n|BTC    |2020-03-01  |                  94680450|\n|BTC    |2020-04-01  |                 134302740|\n|BTC    |2020-05-01  |                 172687010|\n|BTC    |2020-06-01  |                 188026610|\n|BTC    |2020-07-01  |                 201272600|\n|BTC    |2020-08-01  |                 216762630|\n|BTC    |2020-09-01  |                 300641440|\n|BTC    |2020-10-01  |                 303060020|\n\n</div>\n:::\n\n\n#### Question 4.3 - {{< fa brands r-project >}} solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices %>% \n  select(ticker, market_date, volume) %>% \n  filter(market_date >= \"2020-01-01\", market_date <= \"2020-12-31\") %>% \n  mutate(month_start = lubridate::floor_date(market_date, unit = \"month\")) %>% \n  group_by(ticker, month_start) %>% \n  summarise(monthly_volume = sum(\n    case_when(\n      str_sub(volume, -1) == \"K\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^3,\n      str_sub(volume, -1) == \"M\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^6,\n      str_sub(volume, -1) == \"-\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 0)\n    )\n  ) %>% \n  ungroup() %>% \n  group_by(ticker) %>% \n  mutate(cumulative_monthly_volume = cumsum(monthly_volume)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 4\n   ticker month_start monthly_volume cumulative_monthly_volume\n   <chr>  <date>               <dbl>                     <dbl>\n 1 BTC    2020-01-01        23451920                  23451920\n 2 BTC    2020-02-01        23387210                  46839130\n 3 BTC    2020-03-01        47841320                  94680450\n 4 BTC    2020-04-01        39622290                 134302740\n 5 BTC    2020-05-01        38384270                 172687010\n 6 BTC    2020-06-01        15339600                 188026610\n 7 BTC    2020-07-01        13245990                 201272600\n 8 BTC    2020-08-01        15490030                 216762630\n 9 BTC    2020-09-01        83878810                 300641440\n10 BTC    2020-10-01         2418580                 303060020\n# … with 14 more rows\n```\n:::\n:::\n\n\n### Question 4.4\n\nCalculate the daily percentage change in volume for each ticker in the `trading.prices` table\n\n-   Percentage change can be calculated as (current - previous) / previous\n-   Multiply the percentage by 100 and round the value to 2 decimal places\n-   Return data for the first 10 days of August 2021\n\n\n::: {.cell max.print='null'}\n\n```{.sql .cell-code}\nWITH cte_adjusted_prices AS (\n  SELECT\n    ticker,\n    market_date,\n    CASE\n      WHEN RIGHT(volume, 1) = 'K' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000\n      WHEN RIGHT(volume, 1) = 'M' THEN LEFT(volume, LENGTH(volume)-1)::NUMERIC * 1000000\n      WHEN volume = '-' THEN 0\n    END AS volume\n  FROM trading.prices\n),\n\ncte_previous_volume AS (\n  SELECT\n    ticker,\n    market_date,\n    volume,\n    LAG(volume) OVER (PARTITION BY ticker ORDER BY market_date) AS previous_volume\n  FROM cte_adjusted_prices\n  WHERE volume != 0\n)\n  \nSELECT\n  ticker,\n  market_date,\n  volume,\n  previous_volume,\n  ROUND(100 * (volume - previous_volume) / previous_volume, 2) AS daily_change\nFROM cte_previous_volume\nWHERE market_date BETWEEN '2021-08-01' AND '2021-08-10'\nORDER BY ticker, market_date\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 20 records\n\n|ticker |market_date |  volume| previous_volume| daily_change|\n|:------|:-----------|-------:|---------------:|------------:|\n|BTC    |2021-08-01  |   80330|           44650|        79.91|\n|BTC    |2021-08-02  |   74810|           80330|        -6.87|\n|BTC    |2021-08-03  |     260|           74810|       -99.65|\n|BTC    |2021-08-04  |   79220|             260|     30369.23|\n|BTC    |2021-08-05  |  130600|           79220|        64.86|\n|BTC    |2021-08-06  |  111930|          130600|       -14.30|\n|BTC    |2021-08-07  |  112840|          111930|         0.81|\n|BTC    |2021-08-08  |  105250|          112840|        -6.73|\n|BTC    |2021-08-09  |  117080|          105250|        11.24|\n|BTC    |2021-08-10  |   80550|          117080|       -31.20|\n|ETH    |2021-08-01  | 1200000|          507080|       136.65|\n|ETH    |2021-08-02  |  970670|         1200000|       -19.11|\n|ETH    |2021-08-03  |  158450|          970670|       -83.68|\n|ETH    |2021-08-04  | 1230000|          158450|       676.27|\n|ETH    |2021-08-05  | 1650000|         1230000|        34.15|\n|ETH    |2021-08-06  | 1060000|         1650000|       -35.76|\n|ETH    |2021-08-07  |   64840|         1060000|       -93.88|\n|ETH    |2021-08-08  | 1250000|           64840|      1827.82|\n|ETH    |2021-08-09  | 1440000|         1250000|        15.20|\n|ETH    |2021-08-10  | 1120000|         1440000|       -22.22|\n\n</div>\n:::\n\n\n#### Question 4.4 - {{< fa brands r-project >}} solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices %>% \n  select(ticker, market_date, volume) %>% \n  mutate(volume = case_when(\n    str_sub(volume, -1) == \"K\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^3,\n    str_sub(volume, -1) == \"M\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 10^6,\n    str_sub(volume, -1) == \"-\" ~ as.numeric(str_sub(volume, 1, str_length(volume) - 1)) * 0)\n  ) %>% \n  arrange(ticker, market_date) %>% \n  mutate(volume_prev_day = lag(volume)) %>% \n  mutate(daily_change_perc = round(100*(volume - volume_prev_day)/volume_prev_day, 2)) %>% \n  filter(market_date >= \"2021-08-01\", market_date <= \"2021-08-10\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 5\n   ticker market_date  volume volume_prev_day daily_change_perc\n   <chr>  <date>        <dbl>           <dbl>             <dbl>\n 1 BTC    2021-08-01    80330           44650             79.9 \n 2 BTC    2021-08-02    74810           80330             -6.87\n 3 BTC    2021-08-03      260           74810            -99.6 \n 4 BTC    2021-08-04    79220             260          30369.  \n 5 BTC    2021-08-05   130600           79220             64.9 \n 6 BTC    2021-08-06   111930          130600            -14.3 \n 7 BTC    2021-08-07   112840          111930              0.81\n 8 BTC    2021-08-08   105250          112840             -6.73\n 9 BTC    2021-08-09   117080          105250             11.2 \n10 BTC    2021-08-10    80550          117080            -31.2 \n11 ETH    2021-08-01  1200000          507080            137.  \n12 ETH    2021-08-02   970670         1200000            -19.1 \n13 ETH    2021-08-03   158450          970670            -83.7 \n14 ETH    2021-08-04  1230000          158450            676.  \n15 ETH    2021-08-05  1650000         1230000             34.2 \n16 ETH    2021-08-06  1060000         1650000            -35.8 \n17 ETH    2021-08-07    64840         1060000            -93.9 \n18 ETH    2021-08-08  1250000           64840           1828.  \n19 ETH    2021-08-09  1440000         1250000             15.2 \n20 ETH    2021-08-10  1120000         1440000            -22.2 \n```\n:::\n:::\n\n\n## PART 5️⃣: Table Joins\n\n### Question 5.1 - Inner Joins\n\nWhich top 3 mentors have the most Bitcoin quantity? Return the f`irst_name` of the mentors and sort the output from highest to lowest `total_quantity`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  m.first_name,\n  SUM(\n    CASE\n      WHEN t.txn_type = 'BUY' THEN t.quantity \n      WHEN t.txn_type = 'SELL' THEN -t.quantity \n      END\n  ) AS total_quantity\nFROM trading.transactions t\nINNER JOIN trading.members m\n  ON t.member_id = m.member_id\nWHERE ticker = 'BTC' \nGROUP By m.first_name\nORDER BY total_quantity DESC\nLIMIT 3\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|first_name | total_quantity|\n|:----------|--------------:|\n|Nandita    |       4160.220|\n|Leah       |       4046.091|\n|Ayush      |       3945.198|\n\n</div>\n:::\n\n\n### Question 5.2 - Left Joins\n\nShow the `market_date` values which have less than 5 transactions? Sort the output in reverse chronological order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  p.market_date,\n  COUNT(t.txn_id) AS transaction_count\nFROM trading.prices p\nLEFT JOIN trading.transactions t\n  ON p.market_date = t.txn_date\n  AND p.ticker = t.ticker\nGROUP BY p.market_date\nHAVING COUNT(t.txn_id) < 5\nORDER BY p.market_date DESC\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 8 records\n\n|market_date | transaction_count|\n|:-----------|-----------------:|\n|2021-08-29  |                 0|\n|2021-08-28  |                 0|\n|2021-07-17  |                 3|\n|2021-01-06  |                 4|\n|2020-01-17  |                 4|\n|2019-07-15  |                 4|\n|2019-06-14  |                 3|\n|2018-10-20  |                 4|\n\n</div>\n:::\n\n\n### Question 5.3 - Multiple Table Joins\n\n**Part 1:** Calculate the Dollar Cost Average\n\nWhat is the dollar cost average (`btc_dca`) for all Bitcoin purchases by region for each calendar year?\n\n-   Create a column called `year_start` and use the start of the calendar year\n-   The dollar cost average calculation is `btc_dca` = SUM(`quantit`y x `price`) / SUM(`quantity`)\n\n**Part 2:** Yearly Dollar Cost Average Ranking\n\nUse this `btc_dca` value to generate a `dca_ranking` column for each year\n\n-   The region with the lowest `btc_dca` each year has a rank of 1\n\n**Part 3:** Dollar Cost Average Yearly Percentage Change\n\nCalculate the yearly percentage change in DCA for each region to 2 decimal places\n\n-   This calculation is (current - previous) / previous\n\nFinally order the output by `region` and `year_start` columns.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH cte_dollar_cost_average AS (\n  SELECT\n    DATE_TRUNC('YEAR', transactions.txn_date)::DATE AS year_start,\n    members.region,\n    SUM(transactions.quantity * prices.price) / SUM(transactions.quantity) AS btc_dca\n  FROM trading.transactions\n  INNER JOIN trading.prices\n    ON transactions.ticker = prices.ticker\n    AND transactions.txn_date = prices.market_date\n  INNER JOIN trading.members\n    ON transactions.member_id = members.member_id\n  WHERE transactions.ticker = 'BTC'\n    AND transactions.txn_type = 'BUY'\n  GROUP BY year_start, members.region\n),\n  \ncte_window_functions AS (\n  SELECT\n    year_start,\n    region,\n    btc_dca,\n    RANK() OVER (PARTITION BY year_start ORDER BY btc_dca) AS dca_ranking,\n    LAG(btc_dca) OVER (PARTITION BY region ORDER BY year_start) AS previous_btc_dca\n  FROM cte_dollar_cost_average\n)\n  \nSELECT\n  year_start,\n  region,\n  btc_dca,\n  dca_ranking,\n  ROUND(\n    (100 * (btc_dca - previous_btc_dca) / previous_btc_dca)::NUMERIC,\n    2\n  ) AS dca_percentage_change\nFROM cte_window_functions\nORDER BY region, year_start\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|year_start |region |   btc_dca| dca_ranking| dca_percentage_change|\n|:----------|:------|---------:|-----------:|---------------------:|\n|2017-01-01 |Africa |  3987.626|           4|                    NA|\n|2018-01-01 |Africa |  7690.713|           3|                 92.86|\n|2019-01-01 |Africa |  7368.820|           4|                 -4.19|\n|2020-01-01 |Africa | 11114.125|           3|                 50.83|\n|2021-01-01 |Africa | 44247.215|           2|                298.12|\n|2017-01-01 |Asia   |  4002.939|           5|                    NA|\n|2018-01-01 |Asia   |  7829.999|           4|                 95.61|\n|2019-01-01 |Asia   |  7267.679|           1|                 -7.18|\n|2020-01-01 |Asia   | 10759.621|           2|                 48.05|\n|2021-01-01 |Asia   | 44570.901|           4|                314.24|\n\n</div>\n:::\n\n\n<br/>\n\nThanks for reading!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}