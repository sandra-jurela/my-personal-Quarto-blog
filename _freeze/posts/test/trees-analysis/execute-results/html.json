{
  "hash": "8a3db339d117fe4f2392f240ea44e4a8",
  "result": {
    "markdown": "---\ntitle: Test - Altair Viz\ndescription: Testing Altair Viz rendering.\ndate: '2023-05-20'\ncategories:\n  - python\n  - altair\nformat:\n  html:\n    theme: theme-light.scss\n    css: style_python.css\n    embed-resources: true\nimage: images/tree.png\n---\n\n### Data imports\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import libraries \nimport altair as alt\nimport pandas as pd\nimport json\n\nalt.data_transformers.enable(\"data_server\")\n\ntrees_df_original = pd.read_csv('data/vancouver_trees.csv')\n\n# Glance at the original df\ntrees_df_original\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>std_street</th>\n      <th>on_street</th>\n      <th>species_name</th>\n      <th>neighbourhood_name</th>\n      <th>date_planted</th>\n      <th>diameter</th>\n      <th>street_side_name</th>\n      <th>genus_name</th>\n      <th>assigned</th>\n      <th>civic_number</th>\n      <th>plant_area</th>\n      <th>curb</th>\n      <th>tree_id</th>\n      <th>common_name</th>\n      <th>height_range_id</th>\n      <th>on_street_block</th>\n      <th>cultivar_name</th>\n      <th>root_barrier</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>W 13TH AV</td>\n      <td>MAPLE ST</td>\n      <td>PSEUDOPLATANUS</td>\n      <td>Kitsilano</td>\n      <td>NaN</td>\n      <td>9.00</td>\n      <td>EVEN</td>\n      <td>ACER</td>\n      <td>N</td>\n      <td>1996</td>\n      <td>10</td>\n      <td>Y</td>\n      <td>13310</td>\n      <td>SYCAMORE MAPLE</td>\n      <td>4</td>\n      <td>2900</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>49.259856</td>\n      <td>-123.150586</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>WALES ST</td>\n      <td>WALES ST</td>\n      <td>PLATANOIDES</td>\n      <td>Renfrew-Collingwood</td>\n      <td>2018-11-28</td>\n      <td>3.00</td>\n      <td>ODD</td>\n      <td>ACER</td>\n      <td>N</td>\n      <td>5291</td>\n      <td>7</td>\n      <td>Y</td>\n      <td>259084</td>\n      <td>PRINCETON GOLD MAPLE</td>\n      <td>1</td>\n      <td>5200</td>\n      <td>PRINCETON GOLD</td>\n      <td>N</td>\n      <td>49.236650</td>\n      <td>-123.051831</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>W BROADWAY</td>\n      <td>W BROADWAY</td>\n      <td>RUBRUM</td>\n      <td>Kitsilano</td>\n      <td>1996-04-19</td>\n      <td>14.00</td>\n      <td>EVEN</td>\n      <td>ACER</td>\n      <td>N</td>\n      <td>3618</td>\n      <td>C</td>\n      <td>Y</td>\n      <td>167986</td>\n      <td>KARPICK RED MAPLE</td>\n      <td>3</td>\n      <td>3600</td>\n      <td>KARPICK</td>\n      <td>N</td>\n      <td>49.264250</td>\n      <td>-123.184020</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PENTICTON ST</td>\n      <td>PENTICTON ST</td>\n      <td>CALLERYANA</td>\n      <td>Renfrew-Collingwood</td>\n      <td>2006-03-06</td>\n      <td>3.75</td>\n      <td>EVEN</td>\n      <td>PYRUS</td>\n      <td>N</td>\n      <td>2502</td>\n      <td>5</td>\n      <td>Y</td>\n      <td>213386</td>\n      <td>CHANTICLEER PEAR</td>\n      <td>1</td>\n      <td>2500</td>\n      <td>CHANTICLEER</td>\n      <td>Y</td>\n      <td>49.261036</td>\n      <td>-123.052921</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RHODES ST</td>\n      <td>RHODES ST</td>\n      <td>GLYPTOSTROBOIDES</td>\n      <td>Renfrew-Collingwood</td>\n      <td>2001-11-01</td>\n      <td>3.00</td>\n      <td>ODD</td>\n      <td>METASEQUOIA</td>\n      <td>N</td>\n      <td>5639</td>\n      <td>N</td>\n      <td>Y</td>\n      <td>189223</td>\n      <td>DAWN REDWOOD</td>\n      <td>2</td>\n      <td>5600</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>49.233354</td>\n      <td>-123.050249</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>29995</th>\n      <td>ROBSON ST</td>\n      <td>ROBSON ST</td>\n      <td>CAMPESTRE</td>\n      <td>West End</td>\n      <td>NaN</td>\n      <td>7.00</td>\n      <td>ODD</td>\n      <td>ACER</td>\n      <td>N</td>\n      <td>1015</td>\n      <td>c</td>\n      <td>Y</td>\n      <td>122814</td>\n      <td>HEDGE MAPLE</td>\n      <td>2</td>\n      <td>1000</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>49.283666</td>\n      <td>-123.123231</td>\n    </tr>\n    <tr>\n      <th>29996</th>\n      <td>OSLER ST</td>\n      <td>CONNAUGHT DRIVE</td>\n      <td>PLATANOIDES</td>\n      <td>Shaughnessy</td>\n      <td>2007-04-16</td>\n      <td>8.00</td>\n      <td>ODD</td>\n      <td>ACER</td>\n      <td>N</td>\n      <td>4690</td>\n      <td>10</td>\n      <td>Y</td>\n      <td>132211</td>\n      <td>NORWAY MAPLE</td>\n      <td>1</td>\n      <td>1000</td>\n      <td>NaN</td>\n      <td>Y</td>\n      <td>49.243636</td>\n      <td>-123.129480</td>\n    </tr>\n    <tr>\n      <th>29997</th>\n      <td>BEATRICE ST</td>\n      <td>BEATRICE ST</td>\n      <td>CERASIFERA</td>\n      <td>Victoria-Fraserview</td>\n      <td>NaN</td>\n      <td>17.30</td>\n      <td>EVEN</td>\n      <td>PRUNUS</td>\n      <td>N</td>\n      <td>6218</td>\n      <td>9</td>\n      <td>Y</td>\n      <td>59355</td>\n      <td>PISSARD PLUM</td>\n      <td>3</td>\n      <td>6200</td>\n      <td>ATROPURPUREUM</td>\n      <td>N</td>\n      <td>49.227406</td>\n      <td>-123.066936</td>\n    </tr>\n    <tr>\n      <th>29998</th>\n      <td>ANGUS DRIVE</td>\n      <td>ANGUS DRIVE</td>\n      <td>BILOBA</td>\n      <td>Shaughnessy</td>\n      <td>2006-02-17</td>\n      <td>4.00</td>\n      <td>ODD</td>\n      <td>GINKGO</td>\n      <td>N</td>\n      <td>1551</td>\n      <td>9</td>\n      <td>Y</td>\n      <td>207753</td>\n      <td>GINKGO OR MAIDENHAIR TREE</td>\n      <td>1</td>\n      <td>1500</td>\n      <td>NaN</td>\n      <td>Y</td>\n      <td>49.254431</td>\n      <td>-123.140382</td>\n    </tr>\n    <tr>\n      <th>29999</th>\n      <td>MAIN ST</td>\n      <td>MAIN ST</td>\n      <td>EUCHLORA   X</td>\n      <td>Riley Park</td>\n      <td>NaN</td>\n      <td>12.00</td>\n      <td>ODD</td>\n      <td>TILIA</td>\n      <td>N</td>\n      <td>4323</td>\n      <td>C</td>\n      <td>Y</td>\n      <td>92997</td>\n      <td>CRIMEAN LINDEN</td>\n      <td>4</td>\n      <td>4300</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>49.246969</td>\n      <td>-123.101328</td>\n    </tr>\n  </tbody>\n</table>\n<p>30000 rows Ã— 20 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n### Identify and drop irrelevant columns\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Check columns of the original df\ntrees_df_original.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30000 entries, 0 to 29999\nData columns (total 20 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   std_street          30000 non-null  object \n 1   on_street           30000 non-null  object \n 2   species_name        30000 non-null  object \n 3   neighbourhood_name  30000 non-null  object \n 4   date_planted        14085 non-null  object \n 5   diameter            30000 non-null  float64\n 6   street_side_name    30000 non-null  object \n 7   genus_name          30000 non-null  object \n 8   assigned            30000 non-null  object \n 9   civic_number        30000 non-null  int64  \n 10  plant_area          29722 non-null  object \n 11  curb                30000 non-null  object \n 12  tree_id             30000 non-null  int64  \n 13  common_name         30000 non-null  object \n 14  height_range_id     30000 non-null  int64  \n 15  on_street_block     30000 non-null  int64  \n 16  cultivar_name       16178 non-null  object \n 17  root_barrier        30000 non-null  object \n 18  latitude            30000 non-null  float64\n 19  longitude           30000 non-null  float64\ndtypes: float64(3), int64(4), object(13)\nmemory usage: 4.6+ MB\n```\n:::\n:::\n\n\nBased on the above data information and the dataset schema from <a href=\"https://opendata.vancouver.ca/explore/dataset/street-trees/information/?disjunctive.species_name&disjunctive.common_name&disjunctive.height_range_id\" target=\"_blank\">City of Vancouver Open Data Portal - Street Trees</a>, the **columns** can be preliminarily identified as four **groups**:\n\n1.  Trees biological classifications and names, such as `genus_name`, `species_name`, `common_name`, `cultivar_name`\n2.  Trees growth related characteristics, such as `date_planted`, `diameter`, `height_range_id`\n3.  Trees coordinates and areas, such as `latitude`, `longitude`, `neighbourhood_name`\n4.  Other specific location / orientation / identification information\n\nAs per the questions, the irrelevant columns under the fourth group and trees coordinates will be dropped. Also, to narrow down the focus to the highest level of tree classification, the columns of `species_name`, `common_name`, `cultivar_name` will also be dropped and only keep the column of `genus_name`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntrees_df = pd.read_csv('data/vancouver_trees.csv',\n  usecols=['neighbourhood_name','date_planted','diameter','genus_name','height_range_id'],  \n  parse_dates = ['date_planted'])\n                                    \ntrees_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30000 entries, 0 to 29999\nData columns (total 5 columns):\n #   Column              Non-Null Count  Dtype         \n---  ------              --------------  -----         \n 0   neighbourhood_name  30000 non-null  object        \n 1   date_planted        14085 non-null  datetime64[ns]\n 2   diameter            30000 non-null  float64       \n 3   genus_name          30000 non-null  object        \n 4   height_range_id     30000 non-null  int64         \ndtypes: datetime64[ns](1), float64(1), int64(1), object(2)\nmemory usage: 1.1+ MB\n```\n:::\n:::\n\n\n### Exam null values\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Drop observations without value of date_planted\n\ntrees_df = trees_df.dropna(subset=['date_planted'])\n\ntrees_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 14085 entries, 1 to 29998\nData columns (total 5 columns):\n #   Column              Non-Null Count  Dtype         \n---  ------              --------------  -----         \n 0   neighbourhood_name  14085 non-null  object        \n 1   date_planted        14085 non-null  datetime64[ns]\n 2   diameter            14085 non-null  float64       \n 3   genus_name          14085 non-null  object        \n 4   height_range_id     14085 non-null  int64         \ndtypes: datetime64[ns](1), float64(1), int64(1), object(2)\nmemory usage: 660.2+ KB\n```\n:::\n:::\n\n\n### Further exam for error data\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Exam the remaining columns for more details\n\ntrees_df.describe(include='all', datetime_is_numeric=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>neighbourhood_name</th>\n      <th>date_planted</th>\n      <th>diameter</th>\n      <th>genus_name</th>\n      <th>height_range_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>14085</td>\n      <td>14085</td>\n      <td>14085.000000</td>\n      <td>14085</td>\n      <td>14085.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>22</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>68</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Renfrew-Collingwood</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>ACER</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1323</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3970</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>2003-09-20 17:40:42.172523904</td>\n      <td>6.352586</td>\n      <td>NaN</td>\n      <td>1.822932</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>1989-10-27 00:00:00</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>1997-12-15 00:00:00</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>2003-04-01 00:00:00</td>\n      <td>5.000000</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>2009-11-13 00:00:00</td>\n      <td>8.000000</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>2019-06-03 00:00:00</td>\n      <td>317.000000</td>\n      <td>NaN</td>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.273737</td>\n      <td>NaN</td>\n      <td>0.983476</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nIt has been noticed that the **minimum of `diameter` and `height_range_id`** are **zero**. For `height_range_id`, 0 represents the range of height is from 0 to 10 ft. However, since the `diameter` figure is the diameter of tree at breast height, it should not have the value of 0. So these observations will be considered as invalid data and removed from the df.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nindexs = trees_df[trees_df['diameter'] == 0].index\n\ntrees_df.drop(indexs, inplace=True)\n\ntrees_df.describe(include='all', datetime_is_numeric=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>neighbourhood_name</th>\n      <th>date_planted</th>\n      <th>diameter</th>\n      <th>genus_name</th>\n      <th>height_range_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>14083</td>\n      <td>14083</td>\n      <td>14083.000000</td>\n      <td>14083</td>\n      <td>14083.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>22</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>68</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Renfrew-Collingwood</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>ACER</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1323</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3970</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>2003-09-20 23:57:38.893701504</td>\n      <td>6.353489</td>\n      <td>NaN</td>\n      <td>1.822978</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>1989-10-27 00:00:00</td>\n      <td>0.500000</td>\n      <td>NaN</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>1997-12-15 12:00:00</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>2003-04-01 00:00:00</td>\n      <td>5.000000</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>2009-11-13 00:00:00</td>\n      <td>8.000000</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>2019-06-03 00:00:00</td>\n      <td>317.000000</td>\n      <td>NaN</td>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.273568</td>\n      <td>NaN</td>\n      <td>0.983520</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n### Dataset Description\n\nThe cleaned target dataframe **trees_df** is composed of 5 columns. There are 68 distinct genera within the total of 14,083 trees (observations). According to <a href=\"https://opendata.vancouver.ca/explore/dataset/street-trees/information/?disjunctive.species_name&disjunctive.common_name&disjunctive.height_range_id\" target=\"_blank\">City of Vancouver Open Data Portal - Street Trees</a> where the dataset was originally obtained, the brief descriptions of columns are listed as below:\n\n-   **Categorical columns**\n\n`neighbourhood_name`: City's defined local area in which the tree is located.\n\n`genus_name`: Genus name of trees.\n\n-   **Quantitative columns**\n\n`diameter`: DBH in inches (DBH stands for diameter of tree at breast height).\n\n`height_range_id`: 0-10 for every 10 feet (e.g., 0 = 0-10 ft, 1 = 10-20 ft, 2 = 20-30 ft, and10 = 100+ ft).\n\n-   **Datetime columns**\n\n`date_planted`: The date of planting.\n\n### Q1 \n\n> Based on distribution of street trees planted in Vancouver by genus, which genus is the most popular one?\n\nBiological diversity is one of the interests for the analysis. The quick guess for the answer would be Acer as Acer is a genus of trees commonly known as maples. A maple leaf is on the Canadian flag, and the maple has been chosen as a national symbol in Canada.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# To visualize distrubition of genus for whole df\nplot_1_title = alt.TitleParams(\n    \"Figure 1 Number of street trees planted per genus\",\n     subtitle = \"Acer is the most popular genus of street trees\")\n\nplot_1_genus = alt.Chart(trees_df).mark_bar().encode(\n    alt.X('count():Q',title='Number of Trees'),\n    alt.Y('genus_name:N',title='Genus',sort='-x')\n)\n\n# Add text annotation for the number of trees for each genus\ntext_1_genus = plot_1_genus.mark_text(align='left',dx=2).encode(text='count():Q')\n\nplot_1_genus = (plot_1_genus + text_1_genus).properties(title=plot_1_title,width=550)\n\nplot_1_genus\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n\n<div id=\"altair-viz-5ee377e0ee7346c6b02e94e74f970b60\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-5ee377e0ee7346c6b02e94e74f970b60\") {\n      outputDiv = document.getElementById(\"altair-viz-5ee377e0ee7346c6b02e94e74f970b60\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": \"bar\", \"encoding\": {\"x\": {\"aggregate\": \"count\", \"title\": \"Number of Trees\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"genus_name\", \"sort\": \"-x\", \"title\": \"Genus\", \"type\": \"nominal\"}}}, {\"mark\": {\"type\": \"text\", \"align\": \"left\", \"dx\": 2}, \"encoding\": {\"text\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}, \"x\": {\"aggregate\": \"count\", \"title\": \"Number of Trees\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"genus_name\", \"sort\": \"-x\", \"title\": \"Genus\", \"type\": \"nominal\"}}}], \"data\": {\"url\": \"http://localhost:57061/cb49066a685676b2accc3e0246198201.json\"}, \"title\": {\"text\": \"Figure 1 Number of street trees planted per genus\", \"subtitle\": \"Acer is the most popular genus of street trees\"}, \"width\": 550, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\"}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\nFrom Figure 1, it has been confirmed that Acer is the most popular genus of trees based on the dataframe. The number of Acer trees is more than double of Prunus trees that have the second largest number in the Vancouver street trees. All the rest of the genera have less than 1,000 trees shown in the dataframe, and 47 out of the total 68 genera have less than 100 trees.\n\n### Q2 \n\n> In the past 30 years, how many trees have been planted every single year? And what is the number of trees planted by genus each year?\n\nThe dataframe has provide the specific date of being planted for each tree. From the available data, the age of current trees will be calculated first and then plot the number of trees planted by year. Since the accuracy is not a priority in this case, only the year of tree planted will be extracted for calculating the age till 2021.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Extract year of planted and calculate age of trees\ntrees_df_yr = trees_df.assign(year=trees_df['date_planted'].dt.year)\n\n# Calculate the age of trees till 2021.\ntrees_df_age = trees_df_yr.assign(age=(2021-trees_df_yr['year']))\n\n# Plot distribution of number of trees planted by year\n# It has been tested that if specifying the dtype of column 'year' as quantitative (Q), the x-axis label takes scientific\n# formatting, ie. 1,989. To avoid the \",\", the dtype of 'year' has been specified as nominal (N)\nplot_2_title = alt.TitleParams(\n    \"Figure 2 Number of street trees planted each year\",\n     subtitle = \"(Data available from 1989 to 2019)\")\n\nplot_2_year = alt.Chart(trees_df_age).mark_bar().encode(\n    alt.X('year:N',title=None),\n    alt.Y('count():Q',title='Number of trees planted')).properties(title=plot_2_title)\n\nplot_2_year\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n\n<div id=\"altair-viz-12484d466d7e403f8c5f1798f0257796\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-12484d466d7e403f8c5f1798f0257796\") {\n      outputDiv = document.getElementById(\"altair-viz-12484d466d7e403f8c5f1798f0257796\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:57061/0fc7cbf185baa7e14d579864f76d0672.json\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"field\": \"year\", \"title\": null, \"type\": \"nominal\"}, \"y\": {\"aggregate\": \"count\", \"title\": \"Number of trees planted\", \"type\": \"quantitative\"}}, \"title\": {\"text\": \"Figure 2 Number of street trees planted each year\", \"subtitle\": \"(Data available from 1989 to 2019)\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\"}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\nFigure 2 indicates that there was a peak period between 1995 and 2013 to plant street trees by the City of Vancouver. During this period, the city had planted the highest number of trees in a single year in 1998 and in 2013. Before 1995 and after 2014, the number of trees planted was relatively lower, especially in 2016 when there were less than 50 new trees on public boulevards in Vancouver. Urban forestry is a systemic project. How many trees are planted is determined by a group of factors, such as public budget, tree replacement plan due to species distribution, insects, diseases, or environmental stress, etc. It is a clear message that the City of Vancouver has maintained a dynamic public trees planting program that benefits the wellbeings of residents in Vancouver.\n\nMoving further, to plot number of trees planted by year and add dropdown selection by genus.\n\n::: {.cell .column-body-outset-right execution_count=9}\n``` {.python .cell-code}\n# Plot number of trees planted by year and add dropdown selection by genus\n\n# Specify the subtitle color and bold it to draw attention\nplot_3_title = alt.TitleParams(\n    \"Figure 3 Number of street trees planted each year by genus(from 1989 to 2019)\",\n    subtitle = \"Dropdown selection is available by genus\",\n    subtitleColor='steelblue', subtitleFontWeight='bold')\n\ngenus = sorted(trees_df_age['genus_name'].unique())\n\ndropdown_genus = alt.binding_select(name='Genus', options=genus)\n\nselect_genus = alt.selection_single(fields=['genus_name'], bind=dropdown_genus)\n\n# Since objective is to see number of trees for each genus, for y axis, \n# specify stack=False\nplot_3_genus_year_bar = alt.Chart(trees_df_age).mark_bar().encode(\n    alt.X('year:N',title=None),\n    alt.Y('count():Q',stack=False,title='Number of trees planted per genus'),\n    alt.Color('genus_name:N',title='Genus name')\n).add_selection(select_genus).encode(\n    opacity=alt.condition(select_genus, alt.value(0.9), alt.value(0.0))\n    ).properties(title=plot_3_title)\n\nplot_3_genus_year_bar\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n\n<div id=\"altair-viz-7f3a294ece564224ae343003f835bf09\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7f3a294ece564224ae343003f835bf09\") {\n      outputDiv = document.getElementById(\"altair-viz-7f3a294ece564224ae343003f835bf09\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:57061/0fc7cbf185baa7e14d579864f76d0672.json\"}, \"mark\": \"bar\", \"encoding\": {\"color\": {\"field\": \"genus_name\", \"title\": \"Genus name\", \"type\": \"nominal\"}, \"opacity\": {\"condition\": {\"value\": 0.9, \"selection\": \"selector003\"}, \"value\": 0.0}, \"x\": {\"field\": \"year\", \"title\": null, \"type\": \"nominal\"}, \"y\": {\"aggregate\": \"count\", \"stack\": false, \"title\": \"Number of trees planted per genus\", \"type\": \"quantitative\"}}, \"selection\": {\"selector003\": {\"type\": \"single\", \"fields\": [\"genus_name\"], \"bind\": {\"input\": \"select\", \"options\": [\"ABIES\", \"ACER\", \"AESCULUS\", \"AMELANCHIER\", \"BETULA\", \"CALOCEDRUS\", \"CARPINUS\", \"CATALPA\", \"CEDRUS\", \"CELTIS\", \"CERCIDIPHYLLUM\", \"CERCIS\", \"CHAMAECYPARIS\", \"CHITALPA\", \"CLADRASTIS\", \"CORNUS\", \"CORYLUS\", \"CRATAEGUS\", \"DAVIDIA\", \"EUCOMMIA\", \"EUONYMUS\", \"FAGUS\", \"FRAXINUS\", \"GINKGO\", \"GLEDITSIA\", \"GYMNOCLADUS\", \"HIBISCUS\", \"JUGLANS\", \"KOELREUTERIA\", \"LABURNUM\", \"LIQUIDAMBAR\", \"LIRIODENDRON\", \"MAGNOLIA\", \"MALUS\", \"MANGLIETIA\", \"MESPILUS\", \"METASEQUOIA\", \"NOTHOFAGUS\", \"NYSSA\", \"OSTRYIA\", \"PARROTIA\", \"PICEA\", \"PINUS\", \"PLATANUS\", \"POPULUS\", \"PRUNUS\", \"PSEUDOTSUGA\", \"PTEROCARYA\", \"PYRUS\", \"QUERCUS\", \"RHAMNUS\", \"RHUS\", \"ROBINIA\", \"SALIX\", \"SEQUOIA\", \"SEQUOIADENDRON\", \"SOPHORA\", \"SORBUS\", \"STEWARTIA\", \"STYRAX\", \"SYRINGA\", \"TAXUS\", \"THUJA\", \"TILIA\", \"TRACHYCARPUS\", \"TSUGA\", \"ULMUS\", \"ZELKOVA\"], \"name\": \"Genus\"}}}, \"title\": {\"text\": \"Figure 3 Number of street trees planted each year by genus(from 1989 to 2019)\", \"subtitle\": \"Dropdown selection is available by genus\", \"subtitleColor\": \"steelblue\", \"subtitleFontWeight\": \"bold\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\"}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n<br>\n\nFigure 3 with dropdown selection has combined multiple information required in one plot and provide the audiences with convenience to efficiently explore number of trees planted from 1989 to 2019 for each genus.\n\nThe answer to the question 2 would be valuable reference for the public who are interested with tree planting history in Vancouver. In addition, for researchers, the answer will provide a first-hand insight into the urban forestry and street trees replacement planning.\n\n**To be continued...**\n\n",
    "supporting": [
      "trees-analysis_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}