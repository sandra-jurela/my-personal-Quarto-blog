{
  "hash": "ce7eda091cd723a3ed3c6a3850e41464",
  "result": {
    "markdown": "---\ntitle: Grocery Customer Segmentation\ndescription: Customer Segmentation for a grocery store.\ndate: '2023-02-17'\ncategories:\n  - python\n  - customer segmentation\n  - k-means\n---\n\n## Import required packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\n```\n:::\n\n\n## Create the data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# import tables\ntransactions = pd.read_excel(\"data/grocery_database.xlsx\", sheet_name = \"transactions\")\nproduct_areas = pd.read_excel(\"data/grocery_database.xlsx\", sheet_name = \"product_areas\")\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# merge on the product area name\ntransactions = pd.merge(transactions, product_areas, how = \"inner\", on = \"product_area_id\")\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# drop the non-food category\ntransactions.drop(transactions[transactions[\"product_area_name\"] == \"Non-Food\"].index, inplace = True)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# aggregate sales at customer level (by product area)\ntransactions_summary = transactions.groupby([\"customer_id\", \"product_area_name\"])[\"sales_cost\"].sum().reset_index()\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# pivot data to place product areas as columns\ntransactions_summary_pivot = transactions.pivot_table(index = \"customer_id\",\n                                                      columns = \"product_area_name\",\n                                                      values = \"sales_cost\",\n                                                      fill_value = 0,\n                                                      margins = True,\n                                                      margins_name = \"Total\").rename_axis(None, axis = 1)\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(transactions_summary_pivot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Dairy      Fruit       Meat  Vegetables      Total\ncustomer_id                                                        \n1            33.430909  39.428571  60.375556   15.192727  35.637895\n2            15.063000  17.275714  30.151250   11.005556  17.994706\n3            23.100000  75.390000  34.226000    7.875000  27.018333\n4            37.990000  35.051429  34.098750   15.816667  30.376061\n5            33.081429  37.060000  63.872273   18.426316  38.872857\n...                ...        ...        ...         ...        ...\n867          12.984000  25.247143  25.784286    9.870000  17.451212\n868          20.508182  29.907500  34.326000   14.556923  24.282174\n869          12.628000  14.166667  20.431111   12.988462  14.792927\n870          27.552222  32.290000  31.584444   18.527273  27.152051\nTotal        23.884887  28.972701  38.916449   15.800690  26.124548\n\n[871 rows x 5 columns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# turn sales into % sales\ntransactions_summary_pivot = transactions_summary_pivot.div(transactions_summary_pivot[\"Total\"], axis = 0)\n\ntransactions_summary_pivot\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dairy</th>\n      <th>Fruit</th>\n      <th>Meat</th>\n      <th>Vegetables</th>\n      <th>Total</th>\n    </tr>\n    <tr>\n      <th>customer_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.938072</td>\n      <td>1.106366</td>\n      <td>1.694139</td>\n      <td>0.426308</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.837080</td>\n      <td>0.960044</td>\n      <td>1.675562</td>\n      <td>0.611600</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.854975</td>\n      <td>2.790328</td>\n      <td>1.266769</td>\n      <td>0.291469</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.250656</td>\n      <td>1.153916</td>\n      <td>1.122553</td>\n      <td>0.520695</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.851016</td>\n      <td>0.953364</td>\n      <td>1.643107</td>\n      <td>0.474015</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>867</th>\n      <td>0.744017</td>\n      <td>1.446727</td>\n      <td>1.477507</td>\n      <td>0.565577</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>0.844578</td>\n      <td>1.231665</td>\n      <td>1.413630</td>\n      <td>0.599490</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>0.853651</td>\n      <td>0.957665</td>\n      <td>1.381141</td>\n      <td>0.878018</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>870</th>\n      <td>1.014738</td>\n      <td>1.189229</td>\n      <td>1.163243</td>\n      <td>0.682353</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Total</th>\n      <td>0.914270</td>\n      <td>1.109022</td>\n      <td>1.489651</td>\n      <td>0.604822</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>871 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# drop the \"total\" column\ndata_for_clustering = transactions_summary_pivot.drop([\"Total\"], axis = 1)\n\ndata_for_clustering\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dairy</th>\n      <th>Fruit</th>\n      <th>Meat</th>\n      <th>Vegetables</th>\n    </tr>\n    <tr>\n      <th>customer_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.938072</td>\n      <td>1.106366</td>\n      <td>1.694139</td>\n      <td>0.426308</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.837080</td>\n      <td>0.960044</td>\n      <td>1.675562</td>\n      <td>0.611600</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.854975</td>\n      <td>2.790328</td>\n      <td>1.266769</td>\n      <td>0.291469</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.250656</td>\n      <td>1.153916</td>\n      <td>1.122553</td>\n      <td>0.520695</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.851016</td>\n      <td>0.953364</td>\n      <td>1.643107</td>\n      <td>0.474015</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>867</th>\n      <td>0.744017</td>\n      <td>1.446727</td>\n      <td>1.477507</td>\n      <td>0.565577</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>0.844578</td>\n      <td>1.231665</td>\n      <td>1.413630</td>\n      <td>0.599490</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>0.853651</td>\n      <td>0.957665</td>\n      <td>1.381141</td>\n      <td>0.878018</td>\n    </tr>\n    <tr>\n      <th>870</th>\n      <td>1.014738</td>\n      <td>1.189229</td>\n      <td>1.163243</td>\n      <td>0.682353</td>\n    </tr>\n    <tr>\n      <th>Total</th>\n      <td>0.914270</td>\n      <td>1.109022</td>\n      <td>1.489651</td>\n      <td>0.604822</td>\n    </tr>\n  </tbody>\n</table>\n<p>871 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Data preparation & cleaning\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# check for missing values\ndata_for_clustering.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nDairy         0\nFruit         0\nMeat          0\nVegetables    0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# normalise data\nscale_norm = MinMaxScaler()\ndata_for_clustering_scaled = pd.DataFrame(scale_norm.fit_transform(data_for_clustering), columns = data_for_clustering.columns)\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndata_for_clustering_scaled\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dairy</th>\n      <th>Fruit</th>\n      <th>Meat</th>\n      <th>Vegetables</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.275390</td>\n      <td>0.396501</td>\n      <td>0.447083</td>\n      <td>0.238447</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.245742</td>\n      <td>0.344061</td>\n      <td>0.442180</td>\n      <td>0.342086</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.250995</td>\n      <td>1.000000</td>\n      <td>0.334300</td>\n      <td>0.163027</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.367156</td>\n      <td>0.413541</td>\n      <td>0.296242</td>\n      <td>0.291240</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.249833</td>\n      <td>0.341668</td>\n      <td>0.433616</td>\n      <td>0.265130</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>866</th>\n      <td>0.218421</td>\n      <td>0.518479</td>\n      <td>0.389914</td>\n      <td>0.316344</td>\n    </tr>\n    <tr>\n      <th>867</th>\n      <td>0.247943</td>\n      <td>0.441405</td>\n      <td>0.373056</td>\n      <td>0.335312</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>0.250607</td>\n      <td>0.343209</td>\n      <td>0.364483</td>\n      <td>0.491101</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>0.297897</td>\n      <td>0.426197</td>\n      <td>0.306980</td>\n      <td>0.381660</td>\n    </tr>\n    <tr>\n      <th>870</th>\n      <td>0.268403</td>\n      <td>0.397452</td>\n      <td>0.393118</td>\n      <td>0.338294</td>\n    </tr>\n  </tbody>\n</table>\n<p>871 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n## USE WCSS TO FIND A GOOD VALUE FOR K\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nk_values = list(range(1,10))\nwcss_list = []\n\nfor k in k_values:\n    kmeans = KMeans(n_clusters = k, random_state = 42)\n    kmeans.fit(data_for_clustering_scaled)\n    wcss_list.append(kmeans.inertia_)\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nplt.plot(k_values, wcss_list)\nplt.title(\"Within Cluster Sum Squares - by k\")\nplt.xlabel(\"k\")\nplt.ylabel(\"WCSS Score\")\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](grocery_files/figure-html/cell-15-output-1.png){width=661 height=468}\n:::\n:::\n\n\n## INSTANTIATE THE MODEL\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nkmeans = KMeans(n_clusters = 3, random_state = 42)\nkmeans.fit(data_for_clustering_scaled)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nKMeans(n_clusters=3, random_state=42)\n```\n:::\n:::\n\n\n## USE CLUSTER INFORMATION\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# add cluster labels to our data\ndata_for_clustering[\"cluster\"] = kmeans.labels_\n\n\n# check cluster sizes\ndata_for_clustering[\"cluster\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n0    634\n1    135\n2    102\nName: cluster, dtype: int64\n```\n:::\n:::\n\n\n## PROFILE CLUSTERS\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ncluster_summary = data_for_clustering.groupby(\"cluster\")[[\"Dairy\", \"Fruit\", \"Meat\", \"Vegetables\"]].mean().reset_index()\n\ncluster_summary\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cluster</th>\n      <th>Dairy</th>\n      <th>Fruit</th>\n      <th>Meat</th>\n      <th>Vegetables</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.896965</td>\n      <td>1.060159</td>\n      <td>1.500958</td>\n      <td>0.558738</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1.143569</td>\n      <td>1.248487</td>\n      <td>0.184660</td>\n      <td>0.727722</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.004913</td>\n      <td>1.252302</td>\n      <td>0.008695</td>\n      <td>0.737636</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## PLOT OUR CLUSTERS AND CENTROIDS\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ncentroids = kmeans.cluster_centers_\nprint(centroids)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.26332244 0.37994075 0.39610228 0.31251856]\n [0.3357181  0.44743375 0.04873172 0.40703649]\n [0.00144234 0.44880091 0.00229459 0.41258164]]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "grocery_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}