{
  "hash": "8501bc2b973d9fc891bccda325600e33",
  "result": {
    "markdown": "---\ntitle: \"Streamlit app - Airbnb Amsterdam Listings\"\ndescription: \"Cleaning data with Pandas and creating a streamlit app.\"\ndate: \"2023-05-25\"\ncategories: \n  - python\n  - sreamlit\n  - data cleaning\n  - data wrangling\nformat:\n  html:\n    theme: theme-light.scss\n    css: style_python.css\nimage: preview.png\ndraft: false\n---\n\n## Introduction\n\n## Data overview\n\n### Setting up the programming environment\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import libraries\nimport numpy as np\nimport pandas as pd\n\n# show all columns (instead of cascading columns in the middle)\npd.set_option(\"display.max_columns\", None)\n# don\"t show numbers in scientific notation\npd.set_option(\"display.float_format\", \"{:.2f}\".format)\n\n# read the Python Pickle and PyArrow Parquet files\ndf_list = pd.read_pickle(\"data/airbnb_amsterdam_listings.pkl\")\ndf_cal = pd.read_parquet(\"data/airbnb_amsterdam_calendar.parquet\", engine=\"pyarrow\")\n```\n:::\n\n\n### Listings data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf_list.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>host_acceptance_rate</th>\n      <th>host_is_superhost</th>\n      <th>host_listings_count</th>\n      <th>host_total_listings_count</th>\n      <th>neighbourhood_cleansed</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>room_type</th>\n      <th>accommodates</th>\n      <th>bedrooms</th>\n      <th>beds</th>\n      <th>amenities</th>\n      <th>price</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n      <th>has_availability</th>\n      <th>availability_30</th>\n      <th>availability_60</th>\n      <th>availability_90</th>\n      <th>availability_365</th>\n      <th>number_of_reviews</th>\n      <th>number_of_reviews_ltm</th>\n      <th>number_of_reviews_l30d</th>\n      <th>review_scores_rating</th>\n      <th>instant_bookable</th>\n      <th>reviews_per_month</th>\n      <th>price_in_euros</th>\n      <th>price_per_person</th>\n      <th>minimum_price</th>\n      <th>discount_per_5_days_booked</th>\n      <th>discount_per_10_days_booked</th>\n      <th>discount_per_30_and_more_days_booked</th>\n      <th>service_cost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>23726706</td>\n      <td>0.95</td>\n      <td>f</td>\n      <td>1</td>\n      <td>1</td>\n      <td>IJburg - Zeeburgereiland</td>\n      <td>52.35</td>\n      <td>4.98</td>\n      <td>Private room</td>\n      <td>2</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>6</td>\n      <td>$88.00</td>\n      <td>2</td>\n      <td>14</td>\n      <td>t</td>\n      <td>0</td>\n      <td>6</td>\n      <td>20</td>\n      <td>66</td>\n      <td>78</td>\n      <td>11</td>\n      <td>3</td>\n      <td>4.99</td>\n      <td>t</td>\n      <td>1.53</td>\n      <td>None</td>\n      <td>$44</td>\n      <td>$176</td>\n      <td>5%</td>\n      <td>11%</td>\n      <td>16%</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>35815036</td>\n      <td>1.00</td>\n      <td>t</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Noord-Oost</td>\n      <td>52.42</td>\n      <td>4.96</td>\n      <td>Entire home/apt</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>1.00</td>\n      <td>5</td>\n      <td>$105.00</td>\n      <td>3</td>\n      <td>100</td>\n      <td>t</td>\n      <td>4</td>\n      <td>6</td>\n      <td>12</td>\n      <td>243</td>\n      <td>95</td>\n      <td>36</td>\n      <td>6</td>\n      <td>4.96</td>\n      <td>f</td>\n      <td>2.65</td>\n      <td>None</td>\n      <td>$52.5</td>\n      <td>$315</td>\n      <td>5%</td>\n      <td>12%</td>\n      <td>16%</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31553121</td>\n      <td>1.00</td>\n      <td>f</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Noord-West</td>\n      <td>52.43</td>\n      <td>4.92</td>\n      <td>Entire home/apt</td>\n      <td>4</td>\n      <td>1.00</td>\n      <td>3.00</td>\n      <td>3</td>\n      <td>$152.00</td>\n      <td>2</td>\n      <td>60</td>\n      <td>t</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>82</td>\n      <td>26</td>\n      <td>1</td>\n      <td>4.74</td>\n      <td>f</td>\n      <td>2.02</td>\n      <td>None</td>\n      <td>$38</td>\n      <td>$304</td>\n      <td>7%</td>\n      <td>11%</td>\n      <td>22%</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>34745823</td>\n      <td>0.94</td>\n      <td>f</td>\n      <td>3</td>\n      <td>3</td>\n      <td>Gaasperdam - Driemond</td>\n      <td>52.30</td>\n      <td>5.01</td>\n      <td>Entire home/apt</td>\n      <td>2</td>\n      <td>1.00</td>\n      <td>2.00</td>\n      <td>8</td>\n      <td>$87.00</td>\n      <td>2</td>\n      <td>1125</td>\n      <td>t</td>\n      <td>5</td>\n      <td>20</td>\n      <td>26</td>\n      <td>290</td>\n      <td>39</td>\n      <td>4</td>\n      <td>0</td>\n      <td>4.87</td>\n      <td>f</td>\n      <td>1.08</td>\n      <td>None</td>\n      <td>$43.5</td>\n      <td>$174</td>\n      <td>6%</td>\n      <td>10%</td>\n      <td>15%</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>44586947</td>\n      <td>0.88</td>\n      <td>t</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Gaasperdam - Driemond</td>\n      <td>52.31</td>\n      <td>5.03</td>\n      <td>Private room</td>\n      <td>4</td>\n      <td>2.00</td>\n      <td>3.00</td>\n      <td>4</td>\n      <td>$160.00</td>\n      <td>2</td>\n      <td>31</td>\n      <td>t</td>\n      <td>9</td>\n      <td>32</td>\n      <td>62</td>\n      <td>152</td>\n      <td>15</td>\n      <td>12</td>\n      <td>3</td>\n      <td>5.00</td>\n      <td>f</td>\n      <td>0.68</td>\n      <td>None</td>\n      <td>$40</td>\n      <td>$320</td>\n      <td>9%</td>\n      <td>22%</td>\n      <td>20%</td>\n      <td>$4.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br/>\n\nThis dataset needs extensive cleaning which will be performed in the next step.\n\n#### Data dictionary for the listings data\n\nHere is the definition of the listings data columns:\n\n-   `id` - Airbnb's unique identifier for the listing\n-   `host_acceptance_rate` - rate at which a host accepts booking request\n-   `host_is_superhost` - some Airbnb hosts are considered better than others, which this feature displays\n-   `host_listings_count` - the number of listings the host has (per Airbnb calculations)\n-   `host_total_listings_count` - the number of listings the host has (per Airbnb calculations)\n-   `neighborhood_cleansed` - all neighborhoods present in Amsterdam\n-   `latitude` - geographical coordinate going from North to South\n-   `longitude` - geographical coordinate going from East to West\n-   `room_type` - all room types available in Amsterdam on Airbnb\n-   `accommodates` - maximum number of people that can fit in the Airbnb listing\n-   `bedrooms` - number of bedrooms\n-   `beds` - number of beds (does not reveal if they are two-person or one-person beds)\n-   `amenities` - number of amenities present in the Airbnb listing\n-   `price` - price per day in US dollars\n-   `minimum_nights` - minimum number of nights you need to book for this listing\n-   `maximum_nights` - maximum number of nights you are allowed to book this listing\n-   `has_availability` - displays if this listing can be booked\n-   `availability_30` - number of available spots in the next 30 days\n-   `number_of_reviews_l30d` - number of reviews created in the last 30 days\n-   `review_scores_rating` - average rating given to the Airbnb listing\n-   `instant_bookable` - whether the guest can automatically book the listing without the host requiring to accept their booking request. An indicator of a commercial listing.\n-   `price_per_person` - price per person per night in US dollars\n-   `minimum_price` - price in US dollars times minimum nights\n-   `discount_per_â€¦` - displays the discount when 5, 10, or 30+ days are booked\n-   `service_cost` - total service cost paid at booking\n\n### Calendar data\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf_cal.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_id</th>\n      <th>date</th>\n      <th>available</th>\n      <th>price_in_dollar</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>23726706</td>\n      <td>2022-06-05</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23726706</td>\n      <td>2022-06-06</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23726706</td>\n      <td>2022-06-07</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23726706</td>\n      <td>2022-06-08</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23726706</td>\n      <td>2022-06-09</td>\n      <td>False</td>\n      <td>85.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Data dictionary for the calendar data\n\nHere is the definition of the calendar data columns:\n\n-   `listing_id` - Airbnb's unique identifier for the listing\n-   `date` - the date in the listing's calendar\n-   `available` - whether the date is available for a booking\n-   `price_in_dollar` - the price listed for the day\n-   `minimum_nights` - minimum nights for a booking made on this day\n-   `maximum_nights` - maximum nights for a booking made on this day\n\n## Cleaning the Listings DataFrame\n\nTo get an overview of the Listings DataFrame, called `df_list`, we'll need some details about the columns in the DataFrame, like the column names, their data types, and the number of non-null values.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf_list.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 6165 entries, 0 to 6172\nData columns (total 34 columns):\n #   Column                                Non-Null Count  Dtype  \n---  ------                                --------------  -----  \n 0   id                                    6165 non-null   int64  \n 1   host_acceptance_rate                  5365 non-null   float64\n 2   host_is_superhost                     6165 non-null   object \n 3   host_listings_count                   6165 non-null   int64  \n 4   host_total_listings_count             6165 non-null   int64  \n 5   neighbourhood_cleansed                6165 non-null   object \n 6   latitude                              6165 non-null   float64\n 7   longitude                             6165 non-null   float64\n 8   room_type                             6165 non-null   object \n 9   accommodates                          6165 non-null   int64  \n 10  bedrooms                              5859 non-null   float64\n 11  beds                                  6082 non-null   float64\n 12  amenities                             6165 non-null   int64  \n 13  price                                 6165 non-null   object \n 14  minimum_nights                        6165 non-null   int64  \n 15  maximum_nights                        6165 non-null   int64  \n 16  has_availability                      6165 non-null   object \n 17  availability_30                       6165 non-null   int64  \n 18  availability_60                       6165 non-null   int64  \n 19  availability_90                       6165 non-null   int64  \n 20  availability_365                      6165 non-null   int64  \n 21  number_of_reviews                     6165 non-null   int64  \n 22  number_of_reviews_ltm                 6165 non-null   int64  \n 23  number_of_reviews_l30d                6165 non-null   int64  \n 24  review_scores_rating                  5581 non-null   float64\n 25  instant_bookable                      6165 non-null   object \n 26  reviews_per_month                     5581 non-null   float64\n 27  price_in_euros                        0 non-null      object \n 28  price_per_person                      6165 non-null   object \n 29  minimum_price                         6165 non-null   object \n 30  discount_per_5_days_booked            6165 non-null   object \n 31  discount_per_10_days_booked           6165 non-null   object \n 32  discount_per_30_and_more_days_booked  6165 non-null   object \n 33  service_cost                          6165 non-null   object \ndtypes: float64(7), int64(14), object(13)\nmemory usage: 1.6+ MB\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf_list = pd.read_pickle(\"data/airbnb_amsterdam_listings.pkl\")\n```\n:::\n\n\n**STEP 1** - Perform this four-step process to change each of the three `discount_per_...` columns into their proper format:\n\n- Remove non-numeric characters, like the percent symbol, so you can perform mathematical calculations on the column\n- Change the column into a float data type in order to convert the data into a ratio\n- Multiply the whole column by 0.01 so you end up with a probability ratio instead of a percentage\n- Overwrite the old discount_per_... column with this new column\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked'] = (\n    df_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked']\n    .replace('%', '', regex=True)\n    .astype('float')\n    .multiply(0.01)\n)\n\ndf_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked'].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>discount_per_5_days_booked</th>\n      <th>discount_per_10_days_booked</th>\n      <th>discount_per_30_and_more_days_booked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.05</td>\n      <td>0.11</td>\n      <td>0.16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.05</td>\n      <td>0.12</td>\n      <td>0.16</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.07</td>\n      <td>0.11</td>\n      <td>0.22</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.06</td>\n      <td>0.10</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.09</td>\n      <td>0.22</td>\n      <td>0.20</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**STEP 2** - The columns `host_is_superhost`, `instant_bookable`, and `has_availability` are all boolean columns in the sense that their data represents true and false values, but currently are recognized as objects.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf_list[[\"host_is_superhost\", \"instant_bookable\", \"has_availability\"]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>host_is_superhost</th>\n      <th>instant_bookable</th>\n      <th>has_availability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>f</td>\n      <td>t</td>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>t</td>\n      <td>f</td>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>f</td>\n      <td>f</td>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>f</td>\n      <td>f</td>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>t</td>\n      <td>f</td>\n      <td>t</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe letters in these columns (t and f) are written as strings and not as boolean data types. This means we need to replace our string values with the boolean equivalent dtype.\n\nChange the columns host_is_superhost, instant_bookable, and has_availability into a boolean data type for better data processing:\n\n- Replace f and t with False and True\n- Set the column as type bool\n- Overwrite the old columns with the new values\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf_list[[\"host_is_superhost\", \"instant_bookable\", \"has_availability\"]] = (\n    df_list[[\"host_is_superhost\", \"instant_bookable\", \"has_availability\"]]\n    .replace({\"f\": False, \"t\": True})\n    .astype('bool')\n)\n\ndf_list[[\"host_is_superhost\", \"instant_bookable\", \"has_availability\"]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>host_is_superhost</th>\n      <th>instant_bookable</th>\n      <th>has_availability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**STEP 3** - A closer look at the prices in the four columns `price`, `price_per_person`, `minimum_price`, and `service_cost` reveals that they all follow the same pattern:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_list[[\"price\", \"price_per_person\", \"minimum_price\", 'service_cost']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>price_per_person</th>\n      <th>minimum_price</th>\n      <th>service_cost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>$88.00</td>\n      <td>$44</td>\n      <td>$176</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>$105.00</td>\n      <td>$52.5</td>\n      <td>$315</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>$152.00</td>\n      <td>$38</td>\n      <td>$304</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>$87.00</td>\n      <td>$43.5</td>\n      <td>$174</td>\n      <td>$4.99</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>$160.00</td>\n      <td>$40</td>\n      <td>$320</td>\n      <td>$4.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf_list['price'] = (\n    df_list['price']\n    .str.replace('$', '', regex=True)\n    .str.replace(',', '', regex=True)\n    .astype('float')\n)\n\ndf_list['price_per_person'] = (\n    df_list['price_per_person']\n    .str.replace('$', '', regex=True)\n    .str.replace(',', '', regex=True)\n    .astype('float')\n)\n\ndf_list['minimum_price'] = (\n    df_list['minimum_price']\n    .str.replace('$', '', regex=True)\n    .str.replace(',', '', regex=True)\n    .astype('float')\n)\n\ndf_list['service_cost'] = (\n    df_list['service_cost']\n    .str.replace('$', '', regex=True)\n    .str.replace(',', '', regex=True)\n    .astype('float')\n)\n\ndf_list[[\"price\", \"price_per_person\", \"minimum_price\", 'service_cost']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>price_per_person</th>\n      <th>minimum_price</th>\n      <th>service_cost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>88.00</td>\n      <td>44.00</td>\n      <td>176.00</td>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>105.00</td>\n      <td>52.50</td>\n      <td>315.00</td>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>152.00</td>\n      <td>38.00</td>\n      <td>304.00</td>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>87.00</td>\n      <td>43.50</td>\n      <td>174.00</td>\n      <td>4.99</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>160.00</td>\n      <td>40.00</td>\n      <td>320.00</td>\n      <td>4.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**STEP 4** - Renaming columns\n\nThe following column names need to be changed:\n\n- `price` into `price_in_dollar`\n- `neighbourhood_cleansed` into `neighbourhood`\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf_list = df_list.rename(\n  columns={\n    \"price\": \"price_in_dollar\", \n    \"neighbourhood_cleansed\": \"neighbourhood\"\n  }\n)\n```\n:::\n\n\n**STEP 5** Taking a closer look at the `neighbourhood` and `room_type` columns reveals that these columns are assigned an **object dtype**. We want them to be a **category** dtype.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_list[['neighbourhood', 'room_type']] = (\n    df_list[['neighbourhood', 'room_type']]\n    .astype('category')\n)\n```\n:::\n\n\n**STEP 6** - Deleting irrelevant columns\n\nWe need to delete some columns that are irrelevant to this current use case. \n\nLet's inspect the `price_in_euros` column first, because this column seems to contain only null values, which inherently do not add any meaning to the dataset. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_list['price_in_euros'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([None], dtype=object)\n```\n:::\n:::\n\n\nThe approach reveals that this column contains no unique values and is thus empty. We'll trop it with other irrelevant columns.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_list = df_list.drop(\n    columns=[\n        'price_in_euros',\n        'host_listings_count', \n        'host_total_listings_count', \n        'availability_60',\n        'availability_90', \n        'availability_365', \n        'number_of_reviews',\n        'number_of_reviews_ltm', \n        'reviews_per_month'\n    ]\n)\n```\n:::\n\n\nLet's now have a look at which data types we still need to change and which columns have some null values.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_list.info(verbose=True, show_counts=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 6165 entries, 0 to 6172\nData columns (total 25 columns):\n #   Column                                Non-Null Count  Dtype   \n---  ------                                --------------  -----   \n 0   id                                    6165 non-null   int64   \n 1   host_acceptance_rate                  5365 non-null   float64 \n 2   host_is_superhost                     6165 non-null   bool    \n 3   neighbourhood                         6165 non-null   category\n 4   latitude                              6165 non-null   float64 \n 5   longitude                             6165 non-null   float64 \n 6   room_type                             6165 non-null   category\n 7   accommodates                          6165 non-null   int64   \n 8   bedrooms                              5859 non-null   float64 \n 9   beds                                  6082 non-null   float64 \n 10  amenities                             6165 non-null   int64   \n 11  price_in_dollar                       6165 non-null   float64 \n 12  minimum_nights                        6165 non-null   int64   \n 13  maximum_nights                        6165 non-null   int64   \n 14  has_availability                      6165 non-null   bool    \n 15  availability_30                       6165 non-null   int64   \n 16  number_of_reviews_l30d                6165 non-null   int64   \n 17  review_scores_rating                  5581 non-null   float64 \n 18  instant_bookable                      6165 non-null   bool    \n 19  price_per_person                      6165 non-null   float64 \n 20  minimum_price                         6165 non-null   float64 \n 21  discount_per_5_days_booked            6165 non-null   float64 \n 22  discount_per_10_days_booked           6165 non-null   float64 \n 23  discount_per_30_and_more_days_booked  6165 non-null   float64 \n 24  service_cost                          6165 non-null   float64 \ndtypes: bool(3), category(2), float64(13), int64(7)\nmemory usage: 1.0 MB\n```\n:::\n:::\n\n\n**STEP 7** - Some listings have no reviews and an unknown host acceptance rate. Most Airbnb users exclude such listings from their search results. To mimic this filtering approach, we'll filter out any rows that do not have a `review_scores_rating` and without a ``host_acceptance_rate`.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf_list = df_list.dropna(subset=['review_scores_rating', 'host_acceptance_rate'])\n```\n:::\n\n\n**STEP 8** - Which columns still have missing values and how much?\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf_list.isnull().sum().loc[lambda x : x != 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nbedrooms    264\nbeds         69\ndtype: int64\n```\n:::\n:::\n\n\nLet's make some simple assumptions based on the `room_type` assigned to the listing. Which room types are found in the dataset.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf_list[\"room_type\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nEntire home/apt    3158\nPrivate room       1633\nHotel room           67\nShared room          28\nName: room_type, dtype: int64\n```\n:::\n:::\n\n\nThere are four room types. Let's make the assumption that the columns `bedrooms` and `beds` are potentially influenced by `room_type`.\n\nTherefore, we can make the following rules:\n\n- If you have a **\"Private room\"** or **\"Shared room\"** as `room_type`, then we believe the listing only has one bedroom.\n- If the listing has **\"Hotel room\"** or **\"Entire home/apt\"** as `room_type`, then we can divide the number of guests the listing accomodates by 2 and round up.\n- If any of these numbers are missing, then we can leave it empty.\n\nTranslate these requirements into a Python function, and you get:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndef fill_empty_bedrooms(accommodates: int, bedrooms: int, room_type: str) -> int:\n    if (room_type == \"Private room\") or (room_type == \"Shared room\"):\n        return 1\n    elif (room_type == \"Hotel room\") or (room_type == \"Entire home/apt\"):\n        return np.ceil(accommodates / 2)\n    else:\n        return bedrooms\n```\n:::\n\n\nIn the case of Pandas, we are using `apply()` to semi-vectorize our function, but secretly this function just implements something that mimics a for loop. Using a `lambda` together with `apply()` allows us to access multiple columns to generate an outcome.\n\nThis approach is often good enough, but not always, especially if you are dealing with large datasets. Below we will run the `apply()` function for output. \n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf_list[\"bedrooms\"] = df_list[[\"accommodates\", \"bedrooms\", \"room_type\"]].apply(\n    lambda x: fill_empty_bedrooms(x[\"accommodates\"], x[\"bedrooms\"], x[\"room_type\"]),\n    axis=1,\n)\n```\n:::\n\n\nThanks to our logic and assumptions, most listings now have a proper amount of defined rooms. However, there are still a few listings without any number of rooms defined. Remove all rows/entries that have an empty bedrooms, beds.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf_list[[\"bedrooms\", \"beds\"]].isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nbedrooms     0\nbeds        69\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_list = df_list.dropna(subset=[\"beds\"])\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf_list[[\"bedrooms\", \"beds\"]].isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nbedrooms    0\nbeds        0\ndtype: int64\n```\n:::\n:::\n\n\n##### Memory usage\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf_list.memory_usage(deep=True).sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n835941\n```\n:::\n:::\n\n\n## Calendar DataFrame\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf_cal.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_id</th>\n      <th>date</th>\n      <th>available</th>\n      <th>price_in_dollar</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>23726706</td>\n      <td>2022-06-05</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23726706</td>\n      <td>2022-06-06</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23726706</td>\n      <td>2022-06-07</td>\n      <td>False</td>\n      <td>90.00</td>\n      <td>2</td>\n      <td>1125</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Minimum stay\n\nYou are looking to stay for a minimum of 3 days. Since you are unsure when it will be booked, you'd like to exclude all `listing_ids` that go below that threshold of 3 days no matter what time of year. This is because you think that bookings with a minimum stay of 3 days are more likely to have discount prices.\n\nWith these excluded, you would like to see the expected booking price for 5 days:\n\n- Using the helper code, create a conditional index for entries `listing_id` that are above the 3 day threshold\n- Remove them using `.loc[conditional_index]` over the conditional index.\n- Calculate the price of booking a listing for 5 days by multiplying the current day multiplied by 5, and assign this to a column called `five_day_dollar_price`\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# First start by making a copy, for debugging purposes\ncalendar_newdf = df_cal.copy()\n\ninclude_list = calendar_newdf[\"minimum_nights\"] >= 3\n\n# Get all the listings with a minimum nights of 3+\n# Use the include_list\ncalendar_newdf = calendar_newdf.loc[include_list]\n\ncalendar_newdf[\"five_day_dollar_price\"] = calendar_newdf[\"price_in_dollar\"] * 5\n```\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ncalendar_newdf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_id</th>\n      <th>date</th>\n      <th>available</th>\n      <th>price_in_dollar</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n      <th>five_day_dollar_price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>365</th>\n      <td>35815036</td>\n      <td>2022-06-05</td>\n      <td>False</td>\n      <td>105.00</td>\n      <td>3</td>\n      <td>1125</td>\n      <td>525.00</td>\n    </tr>\n    <tr>\n      <th>367</th>\n      <td>35815036</td>\n      <td>2022-06-07</td>\n      <td>True</td>\n      <td>105.00</td>\n      <td>3</td>\n      <td>1125</td>\n      <td>525.00</td>\n    </tr>\n    <tr>\n      <th>368</th>\n      <td>35815036</td>\n      <td>2022-06-08</td>\n      <td>True</td>\n      <td>105.00</td>\n      <td>3</td>\n      <td>1125</td>\n      <td>525.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow let's transform our newly created DataFrame into a pivot table, where we aggregate our rows using the listing_id as the index, and the columns `available` and `five_day_dollar_price` as values.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ncalendar_summarizeddf = pd.pivot_table(\n    data=calendar_newdf,\n    index=\"listing_id\",\n    values=[\"available\", \"five_day_dollar_price\"],\n    aggfunc=np.mean\n)                      # .add_suffix('_avg')\n\ncalendar_summarizeddf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>available</th>\n      <th>five_day_dollar_price</th>\n    </tr>\n    <tr>\n      <th>listing_id</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2818</th>\n      <td>0.21</td>\n      <td>346.90</td>\n    </tr>\n    <tr>\n      <th>44391</th>\n      <td>0.00</td>\n      <td>1200.00</td>\n    </tr>\n    <tr>\n      <th>49552</th>\n      <td>0.46</td>\n      <td>1162.50</td>\n    </tr>\n    <tr>\n      <th>55709</th>\n      <td>0.00</td>\n      <td>818.68</td>\n    </tr>\n    <tr>\n      <th>55868</th>\n      <td>0.00</td>\n      <td>749.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Maximum price and date\n\nCan you make a pivot table that states the maximum `price_in_dollar` for every Airbnb listing?\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ntemp_sum_df = pd.pivot_table(\n    data=calendar_newdf,\n    index=[\"listing_id\"],\n    values=[\"price_in_dollar\"],\n    aggfunc=np.max\n).add_suffix('_max')\n\ntemp_sum_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price_in_dollar_max</th>\n    </tr>\n    <tr>\n      <th>listing_id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2818</th>\n      <td>80.00</td>\n    </tr>\n    <tr>\n      <th>44391</th>\n      <td>240.00</td>\n    </tr>\n    <tr>\n      <th>49552</th>\n      <td>300.00</td>\n    </tr>\n    <tr>\n      <th>55709</th>\n      <td>250.00</td>\n    </tr>\n    <tr>\n      <th>55868</th>\n      <td>200.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Merging\n\nWe are going to merge the pivot table that includes the `five_day_dollar_price` for each listing with `listings_df.` We have to keep in mind that we want to keep only those rows of Airbnb listing IDs that are present in both datasets.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nfinal_df = pd.merge(\n    df_list,\n    calendar_summarizeddf,\n    left_on=[\"id\"],\n    right_on=[\"listing_id\"],\n    how=\"inner\"\n)\n\nfinal_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>host_acceptance_rate</th>\n      <th>host_is_superhost</th>\n      <th>neighbourhood</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>room_type</th>\n      <th>accommodates</th>\n      <th>bedrooms</th>\n      <th>beds</th>\n      <th>amenities</th>\n      <th>price_in_dollar</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n      <th>has_availability</th>\n      <th>availability_30</th>\n      <th>number_of_reviews_l30d</th>\n      <th>review_scores_rating</th>\n      <th>instant_bookable</th>\n      <th>price_per_person</th>\n      <th>minimum_price</th>\n      <th>discount_per_5_days_booked</th>\n      <th>discount_per_10_days_booked</th>\n      <th>discount_per_30_and_more_days_booked</th>\n      <th>service_cost</th>\n      <th>available</th>\n      <th>five_day_dollar_price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>35815036</td>\n      <td>1.00</td>\n      <td>True</td>\n      <td>Noord-Oost</td>\n      <td>52.42</td>\n      <td>4.96</td>\n      <td>Entire home/apt</td>\n      <td>2</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>5</td>\n      <td>105.00</td>\n      <td>3</td>\n      <td>100</td>\n      <td>True</td>\n      <td>4</td>\n      <td>6</td>\n      <td>4.96</td>\n      <td>False</td>\n      <td>52.50</td>\n      <td>315.00</td>\n      <td>0.05</td>\n      <td>0.12</td>\n      <td>0.16</td>\n      <td>4.99</td>\n      <td>0.66</td>\n      <td>528.89</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>19572024</td>\n      <td>1.00</td>\n      <td>False</td>\n      <td>Watergraafsmeer</td>\n      <td>52.31</td>\n      <td>4.91</td>\n      <td>Entire home/apt</td>\n      <td>6</td>\n      <td>3.00</td>\n      <td>6.00</td>\n      <td>14</td>\n      <td>279.00</td>\n      <td>3</td>\n      <td>300</td>\n      <td>True</td>\n      <td>6</td>\n      <td>3</td>\n      <td>4.69</td>\n      <td>False</td>\n      <td>46.50</td>\n      <td>837.00</td>\n      <td>0.09</td>\n      <td>0.16</td>\n      <td>0.14</td>\n      <td>4.99</td>\n      <td>0.82</td>\n      <td>1496.55</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2973384</td>\n      <td>0.38</td>\n      <td>False</td>\n      <td>Watergraafsmeer</td>\n      <td>52.31</td>\n      <td>4.91</td>\n      <td>Entire home/apt</td>\n      <td>5</td>\n      <td>3.00</td>\n      <td>3.00</td>\n      <td>7</td>\n      <td>185.00</td>\n      <td>6</td>\n      <td>21</td>\n      <td>True</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.83</td>\n      <td>False</td>\n      <td>37.00</td>\n      <td>1110.00</td>\n      <td>0.06</td>\n      <td>0.12</td>\n      <td>0.18</td>\n      <td>4.99</td>\n      <td>0.04</td>\n      <td>941.30</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping\n\nNow, let's perform a groupby where we look at the median values of `five_day_dollar_price` and `review_scores_rating` with respect to the `room_type.` Do these results match your intuition?\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nfinal_df.groupby(by='room_type')[['review_scores_rating', 'five_day_dollar_price']].median()\n```\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n(final_df\n    .groupby(by='room_type')\n    .agg(review_scores_rating_median=('review_scores_rating', 'median'),\n         five_day_dollar_price_median=('five_day_dollar_price', 'median')\n    )\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>review_scores_rating_median</th>\n      <th>five_day_dollar_price_median</th>\n    </tr>\n    <tr>\n      <th>room_type</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Entire home/apt</th>\n      <td>4.88</td>\n      <td>975.00</td>\n    </tr>\n    <tr>\n      <th>Hotel room</th>\n      <td>4.56</td>\n      <td>1110.16</td>\n    </tr>\n    <tr>\n      <th>Private room</th>\n      <td>4.79</td>\n      <td>710.91</td>\n    </tr>\n    <tr>\n      <th>Shared room</th>\n      <td>4.60</td>\n      <td>724.11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou might have expected that shared rooms are the cheapest and thus have the lowest rating with respect to median scores. The same can't be said for the most expensive option â€” a hotel room. Will this influence your future considerations when booking ðŸ¤”?\n\n(But before you let this influence your decisions too much, it might be better to assume that this data might be biased in favor of Airbnb and not hotels in general. ðŸ¤·)\n\n## Memory optimization\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfinal_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2883 entries, 0 to 2882\nData columns (total 27 columns):\n #   Column                                Non-Null Count  Dtype   \n---  ------                                --------------  -----   \n 0   id                                    2883 non-null   int64   \n 1   host_acceptance_rate                  2883 non-null   float64 \n 2   host_is_superhost                     2883 non-null   bool    \n 3   neighbourhood                         2883 non-null   category\n 4   latitude                              2883 non-null   float64 \n 5   longitude                             2883 non-null   float64 \n 6   room_type                             2883 non-null   category\n 7   accommodates                          2883 non-null   int64   \n 8   bedrooms                              2883 non-null   float64 \n 9   beds                                  2883 non-null   float64 \n 10  amenities                             2883 non-null   int64   \n 11  price_in_dollar                       2883 non-null   float64 \n 12  minimum_nights                        2883 non-null   int64   \n 13  maximum_nights                        2883 non-null   int64   \n 14  has_availability                      2883 non-null   bool    \n 15  availability_30                       2883 non-null   int64   \n 16  number_of_reviews_l30d                2883 non-null   int64   \n 17  review_scores_rating                  2883 non-null   float64 \n 18  instant_bookable                      2883 non-null   bool    \n 19  price_per_person                      2883 non-null   float64 \n 20  minimum_price                         2883 non-null   float64 \n 21  discount_per_5_days_booked            2883 non-null   float64 \n 22  discount_per_10_days_booked           2883 non-null   float64 \n 23  discount_per_30_and_more_days_booked  2883 non-null   float64 \n 24  service_cost                          2883 non-null   float64 \n 25  available                             2883 non-null   float64 \n 26  five_day_dollar_price                 2883 non-null   float64 \ndtypes: bool(3), category(2), float64(15), int64(7)\nmemory usage: 533.0 KB\n```\n:::\n:::\n\n\n## Streamlit application\n\n::: column-body-outset\n<iframe height=\"2150\" width=\"100%\" frameborder=\"no\" src=\"https://sandra-jurela-airbnb-amsterdam-streamlit-app2-app-zi5wg6.streamlit.app/?embedded=true\">\n\n</iframe>\n:::\n\n",
    "supporting": [
      "amsterdam-listings_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}