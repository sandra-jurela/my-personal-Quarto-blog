{
  "hash": "23d086dfb689e89bb701338a2101c598",
  "result": {
    "markdown": "---\ntitle: \"8 Week SQL Challenge #2 - Pizza Runner\"\ndescription: \"This is the second week case study.\"\ndate: 2022-02-14\ncategories:\n  - SQL\n  - PostgreSQL\n  - EDA\nimage: images/pizza_runner.png\n---\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/pizza_runner.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## Foreword\n\nA few words before we start. This is the second **8 Week SQL Challenge** made by Danny My. For more information please visit his [web page](https://8weeksqlchallenge.com/case-study-2/). I am very grateful for this opportunity to practice SQL skills Thanks Danny! Here I will try to solve the challenge and present my solutions.\n\nFor the purposes of this project, I've created the local `pizza_runner` **Postgres database** on my machine and run the .sql script to create and populate the tables.\n\n### Setting up the programming environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading packages\nlibrary(DBI)\nlibrary(RPostgres)\n```\n:::\n\n\nThe `sql` engine uses the `DBI` package to execute SQL queries, print their results, and optionally assign the results to a data frame. To use the `sql` engine, you first need to establish a DBI connection to a database (typically via the `DBI::dbConnect()` function).\n\n### Creating a connection to the `pizza_runner` database\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycon <- DBI::dbConnect(RPostgres::Postgres(), \n                        dbname = \"pizza_runner\", \n                        host = \"localhost\",  \n                        port = \"5432\",  \n                        user = rstudioapi::askForPassword(\"Database username\"),\n                        password = rstudioapi::askForPassword(\"Database password\"))\n```\n:::\n\n\nThere are several options to [secure your credentials](https://solutions.posit.co/connections/db/best-practices/managing-credentials/index.html) in R. Here I use prompting for credentials via `rstudioapi`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmycon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PqConnection> pizza_runner@localhost:5432\n```\n:::\n:::\n\n\n\n## Introduction\n\nDid you know that over **115 million kilograms** of pizza is consumed daily worldwide??? (Well according to Wikipedia anyway...)\n\nDanny was scrolling through his Instagram feed when something really caught his eye - \"80s Retro Styling and Pizza Is The Future!\"\n\nDanny was sold on the idea, but he knew that pizza alone was not going to help him get seed funding to expand his new Pizza Empire - so he had one more genius idea to combine with it - he was going to Uberize it - and so Pizza Runner was launched!\n\nDanny started by recruiting \"runners\" to deliver fresh pizza from Pizza Runner Headquarters (otherwise known as Danny's house) and also maxed out his credit card to pay freelance developers to build a mobile app to accept orders from customers.\n\n## Entity Relationship Diagram\n\nAfter running the .sql file to create and populate the tables, I've noticed that the primary and foreign keys are not defined. So I made the following ERD in pgAdmin 4 (a GUI tool used to interact with the Postgres database sessions, both locally and remote servers as well).\n\n<br/>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/ERD_pizza_runner.png){width=814}\n:::\n:::\n\n\n## Data Cleaning\n\nData issues in the existing schema include:\n\n-   **`customer_orders` table**\n    -   `null` values entered as text\n    -   using both `NaN` and `null` values\n-   **`runner_orders` table**\n    -   `null` values entered as text\n    -   using both `NaN` and `null` values\n    -   units manually entered in `distance` and `duration` columns\n\nLet's preview these two tables.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.customer_orders\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| order_id| customer_id| pizza_id|exclusions |extras |order_time          |\n|--------:|-----------:|--------:|:----------|:------|:-------------------|\n|        1|         101|        1|           |       |2020-01-01 18:05:02 |\n|        2|         101|        1|           |       |2020-01-01 19:00:52 |\n|        3|         102|        1|           |       |2020-01-02 23:51:23 |\n|        3|         102|        2|           |NA     |2020-01-02 23:51:23 |\n|        4|         103|        1|4          |       |2020-01-04 13:23:46 |\n|        4|         103|        1|4          |       |2020-01-04 13:23:46 |\n|        4|         103|        2|4          |       |2020-01-04 13:23:46 |\n|        5|         104|        1|null       |1      |2020-01-08 21:00:29 |\n|        6|         101|        2|null       |null   |2020-01-08 21:03:13 |\n|        7|         105|        2|null       |1      |2020-01-08 21:20:29 |\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.runner_orders\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|order_id | runner_id|pickup_time         |distance |duration   |cancellation            |\n|:--------|---------:|:-------------------|:--------|:----------|:-----------------------|\n|1        |         1|2020-01-01 18:15:34 |20km     |32 minutes |                        |\n|2        |         1|2020-01-01 19:10:54 |20km     |27 minutes |                        |\n|3        |         1|2020-01-03 00:12:37 |13.4km   |20 mins    |NA                      |\n|4        |         2|2020-01-04 13:53:03 |23.4     |40         |NA                      |\n|5        |         3|2020-01-08 21:10:57 |10       |15         |NA                      |\n|6        |         3|null                |null     |null       |Restaurant Cancellation |\n|7        |         2|2020-01-08 21:30:45 |25km     |25mins     |null                    |\n|8        |         2|2020-01-10 00:15:02 |23.4 km  |15 minute  |null                    |\n|9        |         2|null                |null     |null       |Customer Cancellation   |\n|10       |         1|2020-01-11 18:50:20 |10km     |10minutes  |null                    |\n\n</div>\n:::\n\n\n**`customer_orders`**\n\n-   Converting `null` and `NaN` values into blanks `''` in `exclusions` and `extras`\n    -   Blanks indicate that the customer requested no extras/exclusions for the pizza, whereas `null` values would be ambiguous.\n-   Saving the transformations in a temporary table\n    -   We want to avoid permanently changing the raw data via `UPDATE` commands if possible.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE IF NOT EXISTS pizza_runner.customer_orders_cln AS (\n  SELECT\n    order_id,\n    customer_id,\n    pizza_id,\n    CASE \n      WHEN exclusions IS NULL \n        OR exclusions LIKE 'null' THEN ''\n      ELSE exclusions \n    END AS exclusions,\n    CASE \n      WHEN extras IS NULL\n        OR extras LIKE 'null' THEN ''\n      ELSE extras \n    END AS extras,\n    order_time\n  FROM pizza_runner.customer_orders\n)\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.customer_orders_cln\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| order_id| customer_id| pizza_id|exclusions |extras |order_time          |\n|--------:|-----------:|--------:|:----------|:------|:-------------------|\n|        1|         101|        1|           |       |2020-01-01 18:05:02 |\n|        2|         101|        1|           |       |2020-01-01 19:00:52 |\n|        3|         102|        1|           |       |2020-01-02 23:51:23 |\n|        3|         102|        2|           |       |2020-01-02 23:51:23 |\n|        4|         103|        1|4          |       |2020-01-04 13:23:46 |\n|        4|         103|        1|4          |       |2020-01-04 13:23:46 |\n|        4|         103|        2|4          |       |2020-01-04 13:23:46 |\n|        5|         104|        1|           |1      |2020-01-08 21:00:29 |\n|        6|         101|        2|           |       |2020-01-08 21:03:13 |\n|        7|         105|        2|           |1      |2020-01-08 21:20:29 |\n\n</div>\n:::\n\n\n**`runner_orders`**\n\n-   Converting `'null'` text values into null values for `pickup_time`, `distance` and `duration`\n-   Extracting only numbers and decimal spaces for the distance and duration columns\n    -   Use regular expressions and `NULLIF`to convert non-numeric entries to null values\n-   Converting blanks, `'null'` and `NaN` into null values for cancellation\n-   Saving the transformations in a temporary table\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE IF NOT EXISTS pizza_runner.runner_orders_cln AS (\n  SELECT\n    order_id,\n    runner_id,\n    CASE WHEN pickup_time LIKE 'null' THEN null ELSE pickup_time END::timestamp AS pickup_time,\n    NULLIF(regexp_replace(distance, '[^0-9.]','','g'), '')::numeric AS distance,\n    NULLIF(regexp_replace(duration, '[^0-9.]','','g'), '')::numeric AS duration,\n    CASE WHEN cancellation IN ('null', 'NaN', '') THEN null ELSE cancellation END AS cancellation\n  FROM pizza_runner.runner_orders\n)\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.runner_orders_cln\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|order_id | runner_id|pickup_time         | distance| duration|cancellation            |\n|:--------|---------:|:-------------------|--------:|--------:|:-----------------------|\n|1        |         1|2020-01-01 18:15:34 |     20.0|       32|NA                      |\n|2        |         1|2020-01-01 19:10:54 |     20.0|       27|NA                      |\n|3        |         1|2020-01-03 00:12:37 |     13.4|       20|NA                      |\n|4        |         2|2020-01-04 13:53:03 |     23.4|       40|NA                      |\n|5        |         3|2020-01-08 21:10:57 |     10.0|       15|NA                      |\n|6        |         3|NA                  |       NA|       NA|Restaurant Cancellation |\n|7        |         2|2020-01-08 21:30:45 |     25.0|       25|NA                      |\n|8        |         2|2020-01-10 00:15:02 |     23.4|       15|NA                      |\n|9        |         2|NA                  |       NA|       NA|Customer Cancellation   |\n|10       |         1|2020-01-11 18:50:20 |     10.0|       10|NA                      |\n\n</div>\n:::\n\n\nLet's preview the other four tables.\n\n**`runners`**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.runners\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|runner_id |registration_date |\n|:---------|:-----------------|\n|1         |2021-01-01        |\n|2         |2021-01-03        |\n|3         |2021-01-08        |\n|4         |2021-01-15        |\n\n</div>\n:::\n\n\n**`pizza_names`**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.pizza_names\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|pizza_id |pizza_name |\n|:--------|:----------|\n|1        |Meatlovers |\n|2        |Vegetarian |\n\n</div>\n:::\n\n\n**`pizza_recipes`**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.pizza_recipes\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|pizza_id |toppings                |\n|:--------|:-----------------------|\n|1        |1, 2, 3, 4, 5, 6, 8, 10 |\n|2        |4, 6, 7, 9, 11, 12      |\n\n</div>\n:::\n\n\n**`pizza_toppings`**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM pizza_runner.pizza_toppings\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|topping_id |topping_name |\n|:----------|:------------|\n|1          |Bacon        |\n|2          |BBQ Sauce    |\n|3          |Beef         |\n|4          |Cheese       |\n|5          |Chicken      |\n|6          |Mushrooms    |\n|7          |Onions       |\n|8          |Pepperoni    |\n|9          |Peppers      |\n|10         |Salami       |\n\n</div>\n:::\n\n\n## Case Study Questions\n\nThis case study has **LOTS** of questions - they are broken up by area of focus including:\n\n-   A. Pizza Metrics\n-   B. Runner and Customer Experience\n-   C. Ingredient Optimisation\n-   D. Pricing and Ratings\n-   E. Bonus DML Challenges (DML = Data Manipulation Language)\n\n## A. Pizza Metrics\n\n1.  How many pizzas were ordered?\n2.  How many unique customer orders were made?\n3.  How many successful orders were delivered by each runner?\n4.  How many of each type of pizza was delivered?\n5.  How many Vegetarian and Meatlovers were ordered by each customer?\n6.  What was the maximum number of pizzas delivered in a single order?\n7.  For each customer, how many delivered pizzas had at least 1 change and how many had no changes?\n8.  How many pizzas were delivered that had both exclusions and extras?\n9.  What was the total volume of pizzas ordered for each hour of the day?\n10. What was the volume of orders for each day of the week?\n\n### A. Q1\n\nHow many pizzas were ordered?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  COUNT(*) AS pizza_count\nFROM pizza_runner.customer_orders_cln\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| pizza_count|\n|-----------:|\n|          14|\n\n</div>\n:::\n\n\n### A. Q2\n\nHow many unique customer orders were made?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  COUNT(DISTINCT order_id) AS order_count\nFROM pizza_runner.customer_orders_cln\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| order_count|\n|-----------:|\n|          10|\n\n</div>\n:::\n\n\n### A. Q3\n\nHow many successful orders were delivered by each runner?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  runner_id,\n  COUNT(order_id) AS successful_orders\nFROM pizza_runner.runner_orders_cln\nWHERE cancellation IS NULL\nGROUP BY runner_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|runner_id | successful_orders|\n|:---------|-----------------:|\n|1         |                 4|\n|2         |                 3|\n|3         |                 1|\n\n</div>\n:::\n\n\n### A. Q4\n\nHow many of each type of pizza was delivered?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  pizza_name,\n  COUNT(pizza_id) AS count\nFROM pizza_runner.runner_orders_cln \nJOIN pizza_runner.customer_orders_cln\nUSING (order_id)\nJOIN pizza_runner.pizza_names\nUSING (pizza_id)\nWHERE cancellation IS NULL\nGROUP BY pizza_name\nORDER BY pizza_name\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|pizza_name | count|\n|:----------|-----:|\n|Meatlovers |     9|\n|Vegetarian |     3|\n\n</div>\n:::\n\n\n### A. Q5\n\nHow many Vegetarian and Meatlovers were ordered by each customer?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  customer_id,\n  SUM(CASE WHEN pizza_id = 1 THEN 1 ELSE 0 END) AS meatlovers,\n  SUM(CASE WHEN pizza_id = 2 THEN 1 ELSE 0 END) AS vegetarian\nFROM pizza_runner.customer_orders_cln\nGROUP BY 1\nORDER BY 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|customer_id | meatlovers| vegetarian|\n|:-----------|----------:|----------:|\n|101         |          2|          1|\n|102         |          2|          1|\n|103         |          3|          1|\n|104         |          3|          0|\n|105         |          0|          1|\n\n</div>\n:::\n\n\n### A. Q6\n\nWhat was the maximum number of pizzas delivered in a single order?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(pizza_count) AS max_count\nFROM (\n\tSELECT \n\t  order_id,\n\t  COUNT(*) AS pizza_count\n\tFROM pizza_runner.runner_orders_cln\n\tJOIN pizza_runner.customer_orders_cln\n\tUSING (order_id)\n\tWHERE cancellation IS NULL\n\tGROUP BY 1\n\t) AS subq;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| max_count|\n|---------:|\n|         3|\n\n</div>\n:::\n\n\n### A. Q7\n\nFor each customer, how many delivered pizzas had at least 1 change and how many had no changes?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  customer_id,\n  SUM(CASE WHEN exclusions = '' AND extras = '' THEN 1 ELSE 0 END) AS no_change,\n  SUM(CASE WHEN exclusions != '' OR extras != '' THEN 1 ELSE 0 END) AS change\nFROM pizza_runner.runner_orders_cln\nJOIN pizza_runner.customer_orders_cln \nUSING (order_id)\nWHERE cancellation IS NULL\nGROUP BY 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|customer_id | no_change| change|\n|:-----------|---------:|------:|\n|101         |         2|      0|\n|102         |         3|      0|\n|103         |         0|      3|\n|104         |         1|      2|\n|105         |         0|      1|\n\n</div>\n:::\n\n\n### A. Q8\n\nHow many pizzas were delivered that had both exclusions and extras?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  SUM(CASE WHEN exclusions != '' AND extras != '' THEN 1 ELSE 0 END) \n    AS excl_and_extras_count\nFROM pizza_runner.runner_orders_cln\nJOIN pizza_runner.customer_orders_cln\nUSING (order_id)\nWHERE cancellation IS NULL\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| excl_and_extras_count|\n|---------------------:|\n|                     1|\n\n</div>\n:::\n\n\n### A. Q9\n\nWhat was the total volume of pizzas ordered for each hour of the day?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  DATE_PART('hour', order_time) AS hour,\n  COUNT(*) AS pizza_count\nFROM pizza_runner.customer_orders_cln\nGROUP BY 1\nORDER BY 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n| hour| pizza_count|\n|----:|-----------:|\n|   11|           1|\n|   13|           3|\n|   18|           3|\n|   19|           1|\n|   21|           3|\n|   23|           3|\n\n</div>\n:::\n\n\n### A. Q10\n\nWhat was the volume of orders for each day of the week?\n\nNote: day of the week (0 - 6; Sunday is 0)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  DATE_PART('dow', order_time) AS dow,\n\tTO_CHAR(order_time, 'Day') AS day_of_week,\n  COUNT(*) AS pizza_count\nFROM pizza_runner.customer_orders_cln\nGROUP BY 1, 2\nORDER BY 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|dow |day_of_week | pizza_count|\n|:---|:-----------|-----------:|\n|3   |Wednesday   |           5|\n|4   |Thursday    |           3|\n|5   |Friday      |           1|\n|6   |Saturday    |           5|\n\n</div>\n:::\n\n\n## B. Runner and Customer Experience\n\n1.  How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n2.  What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?\n3.  Is there any relationship between the number of pizzas and how long the order takes to prepare?\n4.  What was the average distance travelled for each customer?\n5.  What was the difference between the longest and shortest delivery times for all orders?\n6.  What was the average speed for each runner for each delivery and do you notice any trend for these values?\n7.  What is the successful delivery percentage for each runner?\n\n### B. Q1\n\nHow many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH runner_signups AS (\n  SELECT\n    runner_id,\n    registration_date,\n    registration_date - ((registration_date - '2021-01-01') % 7)  AS start_of_week\n  FROM pizza_runner.runners\n)\n\nSELECT\n  start_of_week,\n  COUNT(runner_id) AS signups\nFROM runner_signups\nGROUP BY start_of_week\nORDER BY start_of_week\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|start_of_week | signups|\n|:-------------|-------:|\n|2021-01-01    |       2|\n|2021-01-08    |       1|\n|2021-01-15    |       1|\n\n</div>\n:::\n\n\n### B. Q2\n\nWhat was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH t1 AS (\n  SELECT\n    order_id,\n    runner_id,\n    DATE_PART('minute', pickup_time - order_time)::numeric + \n      DATE_PART('second', pickup_time - order_time)::numeric / 60 \n      AS pickup_time\n  FROM pizza_runner.runner_orders_cln\n  JOIN pizza_runner.customer_orders_cln\n  USING (order_id)\n  WHERE cancellation IS NULL\n  GROUP BY 1, 2, 3\n  ORDER BY 1\n  )\n  \nSELECT \n  runner_id, \n  ROUND(AVG(pickup_time), 1) AS avg_pickup_time\nFROM t1\nGROUP BY 1\nORDER BY 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|runner_id | avg_pickup_time|\n|:---------|---------------:|\n|1         |            14.3|\n|2         |            20.0|\n|3         |            10.5|\n\n</div>\n:::\n\n\n### B. Q3\n\nIs there any relationship between the number of pizzas and how long the order takes to prepare?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH t1 AS (\n  SELECT \n    order_id,\n    COUNT(pizza_id) pizza_count,\n    AVG(pickup_time - order_time) AS pickup_time\n  FROM pizza_runner.customer_orders_cln\n  JOIN pizza_runner.runner_orders_cln\n  USING (order_id)\n  WHERE cancellation IS NULL\n  GROUP BY order_id\n  ORDER BY order_id\n  )\n\nSELECT \n  pizza_count,\n  ROUND(AVG(DATE_PART('minute', pickup_time)::numeric + \n    DATE_PART('second', pickup_time)::numeric / 60), 1) AS avg_pickup_time\nFROM t1\nGROUP BY pizza_count\nORDER BY pizza_count\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|pizza_count | avg_pickup_time|\n|:-----------|---------------:|\n|1           |            12.4|\n|2           |            18.4|\n|3           |            29.3|\n\n</div>\n:::\n\n\n### B. Q4\n\nWhat was the average distance travelled for each runner?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  runner_id,\n  ROUND(AVG(distance), 1) AS avg_distance\nFROM pizza_runner.runner_orders_cln\nGROUP BY runner_id\nORDER BY runner_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|runner_id | avg_distance|\n|:---------|------------:|\n|1         |         15.9|\n|2         |         23.9|\n|3         |         10.0|\n\n</div>\n:::\n\n\n### B. Q5\n\nWhat was the difference between the longest and shortest delivery times for all orders?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  MAX(duration) - MIN(duration) AS difference\nFROM pizza_runner.runner_orders_cln\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| difference|\n|----------:|\n|         30|\n\n</div>\n:::\n\n\n### B. Q6\n\nWhat was the average speed for each runner for each delivery and do you notice any trend for these values?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  order_id,\n  runner_id,\n  distance,\n  duration,\n  COUNT(pizza_id) pizza_count,\n  ROUND(distance / (duration/60), 1) AS speed\nFROM pizza_runner.customer_orders_cln\nJOIN pizza_runner.runner_orders_cln\nUSING (order_id)\nWHERE cancellation IS NULL\nGROUP BY 1, 2, 3, 4\nORDER BY runner_id, pizza_count\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 8 records\n\n| order_id| runner_id| distance| duration| pizza_count| speed|\n|--------:|---------:|--------:|--------:|-----------:|-----:|\n|        2|         1|     20.0|       27|           1|  44.4|\n|        1|         1|     20.0|       32|           1|  37.5|\n|       10|         1|     10.0|       10|           2|  60.0|\n|        3|         1|     13.4|       20|           2|  40.2|\n|        7|         2|     25.0|       25|           1|  60.0|\n|        8|         2|     23.4|       15|           1|  93.6|\n|        4|         2|     23.4|       40|           3|  35.1|\n|        5|         3|     10.0|       15|           1|  40.0|\n\n</div>\n:::\n\n\nWhile the fastest delivery only carried 1 pizza and the slowest delivery carried 3 pizzas, there is no clear trend that more pizzas slow down the delivery speed of an order.\n\n### B. Q7\n\nWhat is the successful delivery percentage for each runner?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  runner_id,\n  COUNT(order_id) AS ordered,\n  COUNT(pickup_time) AS delivered,\n  COUNT(pickup_time)::numeric/COUNT(order_id)*100 AS delivery_percentage\nFROM pizza_runner.runner_orders_cln\nGROUP BY runner_id\nORDER BY runner_id\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|runner_id | ordered| delivered| delivery_percentage|\n|:---------|-------:|---------:|-------------------:|\n|1         |       4|         4|                 100|\n|2         |       4|         3|                  75|\n|3         |       2|         1|                  50|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(mycon)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}