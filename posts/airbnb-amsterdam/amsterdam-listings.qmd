---
title: "Streamlit app - Airbnb Amsterdam Listings"
description: "Cleaning data with Pandas and creating a streamlit app."
date: "2023-05-25"
categories: 
  - python
  - sreamlit
  - data cleaning
  - data wrangling
format:
  html:
    theme: theme-light.scss
    css: style_python.css
image: preview.png
draft: true
---

## Introduction

## Data overview

### Setting up the programming environment

```{python}
# import libraries
import numpy as np
import pandas as pd

# show all columns (instead of cascading columns in the middle)
pd.set_option("display.max_columns", None)
# don"t show numbers in scientific notation
pd.set_option("display.float_format", "{:.2f}".format)

# read the Python Pickle and PyArrow Parquet files
df_list = pd.read_pickle("data/airbnb_amsterdam_listings.pkl")
df_cal = pd.read_parquet("data/airbnb_amsterdam_calendar.parquet", engine="pyarrow")
```

### Listings data

```{python}
df_list.head()
```

<br/>

This dataset needs extensive cleaning which will be performed in the next step.

#### Data dictionary for the listings data

Here is the definition of the listings data columns:

-   `id` - Airbnb's unique identifier for the listing
-   `host_acceptance_rate` - rate at which a host accepts booking request
-   `host_is_superhost` - some Airbnb hosts are considered better than others, which this feature displays
-   `host_listings_count` - the number of listings the host has (per Airbnb calculations)
-   `host_total_listings_count` - the number of listings the host has (per Airbnb calculations)
-   `neighborhood_cleansed` - all neighborhoods present in Amsterdam
-   `latitude` - geographical coordinate going from North to South
-   `longitude` - geographical coordinate going from East to West
-   `room_type` - all room types available in Amsterdam on Airbnb
-   `accommodates` - maximum number of people that can fit in the Airbnb listing
-   `bedrooms` - number of bedrooms
-   `beds` - number of beds (does not reveal if they are two-person or one-person beds)
-   `amenities` - number of amenities present in the Airbnb listing
-   `price` - price per day in US dollars
-   `minimum_nights` - minimum number of nights you need to book for this listing
-   `maximum_nights` - maximum number of nights you are allowed to book this listing
-   `has_availability` - displays if this listing can be booked
-   `availability_30` - number of available spots in the next 30 days
-   `number_of_reviews_l30d` - number of reviews created in the last 30 days
-   `review_scores_rating` - average rating given to the Airbnb listing
-   `instant_bookable` - whether the guest can automatically book the listing without the host requiring to accept their booking request. An indicator of a commercial listing.
-   `price_per_person` - price per person per night in US dollars
-   `minimum_price` - price in US dollars times minimum nights
-   `discount_per_â€¦` - displays the discount when 5, 10, or 30+ days are booked
-   `service_cost` - total service cost paid at booking

### Calendar data

```{python}
df_cal.head()
```

#### Data dictionary for the calendar data

Here is the definition of the calendar data columns:

-   `listing_id` - Airbnb's unique identifier for the listing
-   `date` - the date in the listing's calendar
-   `available` - whether the date is available for a booking
-   `price_in_dollar` - the price listed for the day
-   `minimum_nights` - minimum nights for a booking made on this day
-   `maximum_nights` - maximum nights for a booking made on this day

## Cleaning the Listings DataFrame

To get an overview of the Listings DataFrame, called `df_list`, we'll need some details about the columns in the DataFrame, like the column names, their data types, and the number of non-null values.

```{python}
df_list.info()
```

```{python}
df_list = pd.read_pickle("data/airbnb_amsterdam_listings.pkl")
```

**STEP 1** - Perform this four-step process to change each of the three `discount_per_...` columns into their proper format:

- Remove non-numeric characters, like the percent symbol, so you can perform mathematical calculations on the column
- Change the column into a float data type in order to convert the data into a ratio
- Multiply the whole column by 0.01 so you end up with a probability ratio instead of a percentage
- Overwrite the old discount_per_... column with this new column

```{python}
df_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked'] = (
    df_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked']
    .replace('%', '', regex=True)
    .astype('float')
    .multiply(0.01)
)

df_list.loc[:,'discount_per_5_days_booked':'discount_per_30_and_more_days_booked'].head()
```

**STEP 2** - The columns `host_is_superhost`, `instant_bookable`, and `has_availability` are all boolean columns in the sense that their data represents true and false values, but currently are recognized as objects.

```{python}
df_list[["host_is_superhost", "instant_bookable", "has_availability"]].head()
```
The letters in these columns (t and f) are written as strings and not as boolean data types. This means we need to replace our string values with the boolean equivalent dtype.

Change the columns host_is_superhost, instant_bookable, and has_availability into a boolean data type for better data processing:

- Replace f and t with False and True
- Set the column as type bool
- Overwrite the old columns with the new values

```{python}
df_list[["host_is_superhost", "instant_bookable", "has_availability"]] = (
    df_list[["host_is_superhost", "instant_bookable", "has_availability"]]
    .replace({"f": False, "t": True})
    .astype('bool')
)

df_list[["host_is_superhost", "instant_bookable", "has_availability"]].head()
```

**STEP 3** - A closer look at the prices in the four columns `price`, `price_per_person`, `minimum_price`, and `service_cost` reveals that they all follow the same pattern:

```{python}
df_list[["price", "price_per_person", "minimum_price", 'service_cost']].head()
```

```{python}
df_list['price'] = (
    df_list['price']
    .str.replace('$', '', regex=True)
    .str.replace(',', '', regex=True)
    .astype('float')
)

df_list['price_per_person'] = (
    df_list['price_per_person']
    .str.replace('$', '', regex=True)
    .str.replace(',', '', regex=True)
    .astype('float')
)

df_list['minimum_price'] = (
    df_list['minimum_price']
    .str.replace('$', '', regex=True)
    .str.replace(',', '', regex=True)
    .astype('float')
)

df_list['service_cost'] = (
    df_list['service_cost']
    .str.replace('$', '', regex=True)
    .str.replace(',', '', regex=True)
    .astype('float')
)

df_list[["price", "price_per_person", "minimum_price", 'service_cost']].head()
```


**STEP 4** - Renaming columns

The following column names need to be changed:

- `price` into `price_in_dollar`
- `neighbourhood_cleansed` into `neighbourhood`

```{python}
df_list = df_list.rename(
  columns={
    "price": "price_in_dollar", 
    "neighbourhood_cleansed": "neighbourhood"
  }
)
```

**STEP 5** Taking a closer look at the `neighbourhood` and `room_type` columns reveals that these columns are assigned an **object dtype**. We want them to be a **category** dtype.

```{python}
df_list[['neighbourhood', 'room_type']] = (
    df_list[['neighbourhood', 'room_type']]
    .astype('category')
)
```

**STEP 6** - Deleting irrelevant columns

We need to delete some columns that are irrelevant to this current use case. 

Let's inspect the `price_in_euros` column first, because this column seems to contain only null values, which inherently do not add any meaning to the dataset. 

```{python}
df_list['price_in_euros'].unique()
```

The approach reveals that this column contains no unique values and is thus empty. We'll trop it with other irrelevant columns.

```{python}
df_list = df_list.drop(
    columns=[
        'price_in_euros',
        'host_listings_count', 
        'host_total_listings_count', 
        'availability_60',
        'availability_90', 
        'availability_365', 
        'number_of_reviews',
        'number_of_reviews_ltm', 
        'reviews_per_month'
    ]
)
```


Let's now have a look at which data types we still need to change and which columns have some null values.

```{python}
df_list.info(verbose=True, show_counts=True)
```

**STEP 7** - Some listings have no reviews and an unknown host acceptance rate. Most Airbnb users exclude such listings from their search results. To mimic this filtering approach, we'll filter out any rows that do not have a `review_scores_rating` and without a ``host_acceptance_rate`.

```{python}
df_list = df_list.dropna(subset=['review_scores_rating', 'host_acceptance_rate'])
```


**STEP 8** - Which columns still have missing values and how much?

```{python}
df_list.isnull().sum().loc[lambda x : x != 0]
```

Let's make some simple assumptions based on the `room_type` assigned to the listing. Which room types are found in the dataset.

```{python}
df_list["room_type"].value_counts()
```

There are four room types. Let's make the assumption that the columns `bedrooms` and `beds` are potentially influenced by `room_type`.

Therefore, we can make the following rules:

- If you have a **"Private room"** or **"Shared room"** as `room_type`, then we believe the listing only has one bedroom.
- If the listing has **"Hotel room"** or **"Entire home/apt"** as `room_type`, then we can divide the number of guests the listing accomodates by 2 and round up.
- If any of these numbers are missing, then we can leave it empty.

Translate these requirements into a Python function, and you get:

```{python}
def fill_empty_bedrooms(accommodates: int, bedrooms: int, room_type: str) -> int:
    if (room_type == "Private room") or (room_type == "Shared room"):
        return 1
    elif (room_type == "Hotel room") or (room_type == "Entire home/apt"):
        return np.ceil(accommodates / 2)
    else:
        return bedrooms
```

In the case of Pandas, we are using `apply()` to semi-vectorize our function, but secretly this function just implements something that mimics a for loop. Using a `lambda` together with `apply()` allows us to access multiple columns to generate an outcome.

This approach is often good enough, but not always, especially if you are dealing with large datasets. Below we will run the `apply()` function for output. 

```{python}
df_list["bedrooms"] = df_list[["accommodates", "bedrooms", "room_type"]].apply(
    lambda x: fill_empty_bedrooms(x["accommodates"], x["bedrooms"], x["room_type"]),
    axis=1,
)
```


Thanks to our logic and assumptions, most listings now have a proper amount of defined rooms. However, there are still a few listings without any number of rooms defined. Remove all rows/entries that have an empty bedrooms, beds.

```{python}
df_list[["bedrooms", "beds"]].isnull().sum()
```

```{python}
df_list = df_list.dropna(subset=["beds"])
```


```{python}
df_list[["bedrooms", "beds"]].isnull().sum()
```

##### Memory usage

```{python}
df_list.memory_usage(deep=True).sum()
```

## Calendar DataFrame

```{python}
df_cal.head(3)
```

#### Minimum stay

You are looking to stay for a minimum of 3 days. Since you are unsure when it will be booked, you'd like to exclude all `listing_ids` that go below that threshold of 3 days no matter what time of year. This is because you think that bookings with a minimum stay of 3 days are more likely to have discount prices.

With these excluded, you would like to see the expected booking price for 5 days:

- Using the helper code, create a conditional index for entries `listing_id` that are above the 3 day threshold
- Remove them using `.loc[conditional_index]` over the conditional index.
- Calculate the price of booking a listing for 5 days by multiplying the current day multiplied by 5, and assign this to a column called `five_day_dollar_price`

```{python}
# First start by making a copy, for debugging purposes
calendar_newdf = df_cal.copy()

include_list = calendar_newdf["minimum_nights"] >= 3

# Get all the listings with a minimum nights of 3+
# Use the include_list
calendar_newdf = calendar_newdf.loc[include_list]

calendar_newdf["five_day_dollar_price"] = calendar_newdf["price_in_dollar"] * 5
```


```{python}
calendar_newdf.head(3)
```



Now let's transform our newly created DataFrame into a pivot table, where we aggregate our rows using the listing_id as the index, and the columns `available` and `five_day_dollar_price` as values.

```{python}
calendar_summarizeddf = pd.pivot_table(
    data=calendar_newdf,
    index="listing_id",
    values=["available", "five_day_dollar_price"],
    aggfunc=np.mean
)                      # .add_suffix('_avg')

calendar_summarizeddf.head()
```


#### Maximum price and date

Can you make a pivot table that states the maximum `price_in_dollar` for every Airbnb listing?

```{python}
temp_sum_df = pd.pivot_table(
    data=calendar_newdf,
    index=["listing_id"],
    values=["price_in_dollar"],
    aggfunc=np.max
).add_suffix('_max')

temp_sum_df.head()
```
## Merging

We are going to merge the pivot table that includes the `five_day_dollar_price` for each listing with `listings_df.` We have to keep in mind that we want to keep only those rows of Airbnb listing IDs that are present in both datasets.

```{python}
final_df = pd.merge(
    df_list,
    calendar_summarizeddf,
    left_on=["id"],
    right_on=["listing_id"],
    how="inner"
)

final_df.head(3)
```

## Grouping

Now, let's perform a groupby where we look at the median values of `five_day_dollar_price` and `review_scores_rating` with respect to the `room_type.` Do these results match your intuition?

```{python}
#| eval: false
#| echo: false
final_df.groupby(by='room_type')[['review_scores_rating', 'five_day_dollar_price']].median()
```

```{python}
(final_df
    .groupby(by='room_type')
    .agg(review_scores_rating_median=('review_scores_rating', 'median'),
         five_day_dollar_price_median=('five_day_dollar_price', 'median')
    )
)
```

You might have expected that shared rooms are the cheapest and thus have the lowest rating with respect to median scores. The same can't be said for the most expensive option â€” a hotel room. Will this influence your future considerations when booking ðŸ¤”?

(But before you let this influence your decisions too much, it might be better to assume that this data might be biased in favor of Airbnb and not hotels in general. ðŸ¤·)

## Memory optimization

```{python}
final_df.info()
```



## Streamlit application

::: column-body-outset
<iframe height="2150" width="100%" frameborder="no" src="https://sandra-jurela-airbnb-amsterdam-streamlit-app2-app-zi5wg6.streamlit.app/?embedded=true">

</iframe>
:::
